
SunSensor_AVRDB_v0.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000cfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c86  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  00804000  00804000  00000cfa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cfa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ca6  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003153  00000000  00000000  00004aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000832  00000000  00000000  00007c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00008440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cf2  00000000  00000000  000085b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ef  00000000  00000000  0000a2a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000a595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_18>
  4c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  58:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  5c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  60:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  64:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  68:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  6c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  70:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  74:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  78:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  7c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  80:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  84:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  88:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  8c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  90:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  94:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  98:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  9c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  a0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  a4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  a8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  ac:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  b0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  b4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  b8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  bc:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  c0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  c4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  c8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  cc:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  d0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  d4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  d8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  dc:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  e0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  e4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  e8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  ec:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  f0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  f4:	08 4a       	sbci	r16, 0xA8	; 168
  f6:	d7 3b       	cpi	r29, 0xB7	; 183
  f8:	3b ce       	rjmp	.-906    	; 0xfffffd70 <__eeprom_end+0xff7efd70>
  fa:	01 6e       	ori	r16, 0xE1	; 225
  fc:	84 bc       	out	0x24, r8	; 36
  fe:	bf fd       	.word	0xfdbf	; ????
 100:	c1 2f       	mov	r28, r17
 102:	3d 6c       	ori	r19, 0xCD	; 205
 104:	74 31       	cpi	r23, 0x14	; 20
 106:	9a bd       	out	0x2a, r25	; 42
 108:	56 83       	std	Z+6, r21	; 0x06
 10a:	3d da       	rcall	.-2950   	; 0xfffff586 <__eeprom_end+0xff7ef586>
 10c:	3d 00       	.word	0x003d	; ????
 10e:	c7 7f       	andi	r28, 0xF7	; 247
 110:	11 be       	out	0x31, r1	; 49
 112:	d9 e4       	ldi	r29, 0x49	; 73
 114:	bb 4c       	sbci	r27, 0xCB	; 203
 116:	3e 91       	ld	r19, -X
 118:	6b aa       	std	Y+51, r6	; 0x33
 11a:	aa be       	out	0x3a, r10	; 58
 11c:	00 00       	nop
 11e:	00 80       	ld	r0, Z
 120:	3f 05       	cpc	r19, r15
 122:	a8 4c       	sbci	r26, 0xC8	; 200
 124:	cd b2       	in	r12, 0x1d	; 29
 126:	d4 4e       	sbci	r29, 0xE4	; 228
 128:	b9 38       	cpi	r27, 0x89	; 137
 12a:	36 a9       	ldd	r19, Z+54	; 0x36
 12c:	02 0c       	add	r0, r2
 12e:	50 b9       	out	0x00, r21	; 0
 130:	91 86       	std	Z+9, r9	; 0x09
 132:	88 08       	sbc	r8, r8
 134:	3c a6       	std	Y+44, r3	; 0x2c
 136:	aa aa       	std	Y+50, r10	; 0x32
 138:	2a be       	out	0x3a, r2	; 58
 13a:	00 00       	nop
 13c:	00 80       	ld	r0, Z
 13e:	3f 00       	.word	0x003f	; ????

00000140 <__ctors_end>:
 140:	11 24       	eor	r1, r1
 142:	1f be       	out	0x3f, r1	; 63
 144:	cf ef       	ldi	r28, 0xFF	; 255
 146:	cd bf       	out	0x3d, r28	; 61
 148:	df e7       	ldi	r29, 0x7F	; 127
 14a:	de bf       	out	0x3e, r29	; 62

0000014c <__do_clear_bss>:
 14c:	20 e4       	ldi	r18, 0x40	; 64
 14e:	a0 e0       	ldi	r26, 0x00	; 0
 150:	b0 e4       	ldi	r27, 0x40	; 64
 152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
 154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
 156:	aa 33       	cpi	r26, 0x3A	; 58
 158:	b2 07       	cpc	r27, r18
 15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
 15c:	0e 94 b4 00 	call	0x168	; 0x168 <main>
 160:	0c 94 41 06 	jmp	0xc82	; 0xc82 <_exit>

00000164 <__bad_interrupt>:
 164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <main>:
#include "include/sun_sensor.h"


int main(void)
{	
	slaveAddress = 0x08;
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	80 93 14 40 	sts	0x4014, r24	; 0x804014 <slaveAddress>
	
	h = 2.18e-3;
 16e:	85 e5       	ldi	r24, 0x55	; 85
 170:	9e ed       	ldi	r25, 0xDE	; 222
 172:	ae e0       	ldi	r26, 0x0E	; 14
 174:	bb e3       	ldi	r27, 0x3B	; 59
 176:	80 93 35 40 	sts	0x4035, r24	; 0x804035 <h>
 17a:	90 93 36 40 	sts	0x4036, r25	; 0x804036 <h+0x1>
 17e:	a0 93 37 40 	sts	0x4037, r26	; 0x804037 <h+0x2>
 182:	b0 93 38 40 	sts	0x4038, r27	; 0x804038 <h+0x3>
	r = 1.26e-3;
 186:	86 e9       	ldi	r24, 0x96	; 150
 188:	96 e2       	ldi	r25, 0x26	; 38
 18a:	a5 ea       	ldi	r26, 0xA5	; 165
 18c:	ba e3       	ldi	r27, 0x3A	; 58
 18e:	80 93 19 40 	sts	0x4019, r24	; 0x804019 <r>
 192:	90 93 1a 40 	sts	0x401A, r25	; 0x80401a <r+0x1>
 196:	a0 93 1b 40 	sts	0x401B, r26	; 0x80401b <r+0x2>
 19a:	b0 93 1c 40 	sts	0x401C, r27	; 0x80401c <r+0x3>
	
	I2C_init(slaveAddress);
 19e:	88 e0       	ldi	r24, 0x08	; 8
 1a0:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_init>
	ADC_init();
 1a4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <ADC_init>
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <main+0x40>

000001aa <ADC_init>:
	- Interrupt based ADC
*/

void ADC_init(void)
	{
		VREF.ADC0REF = VREF_REFSEL_2V500_gc;	//Set VREF
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		ADC0.CTRLC = ADC_PRESC_DIV20_gc;		//Select pre-scaler to 20 (CLK_ADC = 4Mhz/20 = 200kHz)
 1b0:	e0 e0       	ldi	r30, 0x00	; 0
 1b2:	f6 e0       	ldi	r31, 0x06	; 6
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	82 83       	std	Z+2, r24	; 0x02
		ADC0.CTRLA = ADC_ENABLE_bm;				//Enable ADC
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <I2C_init>:
	}
}

void I2C_init(uint8_t slaveAddress)
	{
		sei();
 1be:	78 94       	sei
		TWI0.SCTRLA = TWI_DIEN_bm | TWI_APIEN_bm | TWI_ENABLE_bm;
 1c0:	e0 e0       	ldi	r30, 0x00	; 0
 1c2:	f9 e0       	ldi	r31, 0x09	; 9
 1c4:	91 ec       	ldi	r25, 0xC1	; 193
 1c6:	91 87       	std	Z+9, r25	; 0x09
		TWI0.SADDR = slaveAddress << 1;
 1c8:	88 0f       	add	r24, r24
 1ca:	84 87       	std	Z+12, r24	; 0x0c
 1cc:	08 95       	ret

000001ce <I2C_sendData>:
	}
	
void I2C_sendData(uint8_t cmd, uint16_t angles[])
	//TO DO: Write more efficient code for transmitting data
	{
		switch(cmd)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	59 f0       	breq	.+22     	; 0x1e8 <I2C_sendData+0x1a>
 1d2:	28 f0       	brcs	.+10     	; 0x1de <I2C_sendData+0x10>
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	69 f0       	breq	.+26     	; 0x1f2 <I2C_sendData+0x24>
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	81 f0       	breq	.+32     	; 0x1fc <I2C_sendData+0x2e>
 1dc:	14 c0       	rjmp	.+40     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
		{
			case 0x00:
				TWI0.SDATA = (angles[1] >> 8) & 0xFF;			//theta MSB
 1de:	fb 01       	movw	r30, r22
 1e0:	83 81       	ldd	r24, Z+3	; 0x03
 1e2:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <__TEXT_REGION_LENGTH__+0x7e090d>
				break;
 1e6:	08 95       	ret
			case 0x01:
				TWI0.SDATA = (angles[1] >> 0) & 0xFF;			//theta LSB
 1e8:	fb 01       	movw	r30, r22
 1ea:	82 81       	ldd	r24, Z+2	; 0x02
 1ec:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <__TEXT_REGION_LENGTH__+0x7e090d>
				break;
 1f0:	08 95       	ret
			case 0x02:
				TWI0.SDATA = (angles[0] >> 8) & 0xFF;				//phi MSB
 1f2:	fb 01       	movw	r30, r22
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <__TEXT_REGION_LENGTH__+0x7e090d>
				break;
 1fa:	08 95       	ret
			case 0x03:
				TWI0.SDATA = (angles[0] >> 0) & 0xFF;				//phi LSB
 1fc:	fb 01       	movw	r30, r22
 1fe:	80 81       	ld	r24, Z
 200:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <__TEXT_REGION_LENGTH__+0x7e090d>
				break;
 204:	08 95       	ret
			default:
				TWI0.SDATA = 111;
 206:	8f e6       	ldi	r24, 0x6F	; 111
 208:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <__TEXT_REGION_LENGTH__+0x7e090d>
 20c:	08 95       	ret

0000020e <I2C_sendAck>:
		}
	}
	
void I2C_sendAck(void)
	{
		TWI0.SCTRLB = TWI_ACKACT_ACK_gc;
 20e:	e0 e0       	ldi	r30, 0x00	; 0
 210:	f9 e0       	ldi	r31, 0x09	; 9
 212:	12 86       	std	Z+10, r1	; 0x0a
		TWI0.SCTRLB |= TWI_SCMD_RESPONSE_gc;
 214:	82 85       	ldd	r24, Z+10	; 0x0a
 216:	83 60       	ori	r24, 0x03	; 3
 218:	82 87       	std	Z+10, r24	; 0x0a
 21a:	08 95       	ret

0000021c <__vector_18>:
	- Rewrite I2C_sendData to send more than one byte at once, and be more flexible
	- Create function to set new I2C address
	- Move getVector function out from ISR
*/

ISR(TWI0_TWIS_vect){
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	0b b6       	in	r0, 0x3b	; 59
 228:	0f 92       	push	r0
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	if((TWI0.SSTATUS & TWI_APIF_bm) && (TWI0.SSTATUS & TWI_AP_bm))		//Address interrupt
 242:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <__TEXT_REGION_LENGTH__+0x7e090b>
 246:	86 ff       	sbrs	r24, 6
 248:	07 c0       	rjmp	.+14     	; 0x258 <__vector_18+0x3c>
 24a:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <__TEXT_REGION_LENGTH__+0x7e090b>
 24e:	80 ff       	sbrs	r24, 0
 250:	03 c0       	rjmp	.+6      	; 0x258 <__vector_18+0x3c>
	{
		I2C_sendAck();													//Send ACK after address received
 252:	0e 94 07 01 	call	0x20e	; 0x20e <I2C_sendAck>
 256:	2d c0       	rjmp	.+90     	; 0x2b2 <__vector_18+0x96>
	}
	else if(TWI0_SSTATUS & TWI_DIF_bm)									//Data interrupt
 258:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <__TEXT_REGION_LENGTH__+0x7e090b>
 25c:	88 23       	and	r24, r24
 25e:	4c f5       	brge	.+82     	; 0x2b2 <__vector_18+0x96>
	{
		if(TWI0.SSTATUS & TWI_DIR_bm)									//Master read from slave
 260:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <__TEXT_REGION_LENGTH__+0x7e090b>
 264:	81 ff       	sbrs	r24, 1
 266:	09 c0       	rjmp	.+18     	; 0x27a <__vector_18+0x5e>
		{
			I2C_sendData(cmd,angles);
 268:	6c e0       	ldi	r22, 0x0C	; 12
 26a:	70 e4       	ldi	r23, 0x40	; 64
 26c:	80 91 39 40 	lds	r24, 0x4039	; 0x804039 <cmd>
 270:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_sendData>
			I2C_sendAck();												//Send ACK after data sent
 274:	0e 94 07 01 	call	0x20e	; 0x20e <I2C_sendAck>
 278:	1c c0       	rjmp	.+56     	; 0x2b2 <__vector_18+0x96>
		}
		else															//Master write to slave
		{
			cmd = TWI0.SDATA;
 27a:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <__TEXT_REGION_LENGTH__+0x7e090d>
 27e:	80 93 39 40 	sts	0x4039, r24	; 0x804039 <cmd>
			I2C_sendAck();												//Send ACK after data received
 282:	0e 94 07 01 	call	0x20e	; 0x20e <I2C_sendAck>
			switch(cmd)
 286:	80 91 39 40 	lds	r24, 0x4039	; 0x804039 <cmd>
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	91 f4       	brne	.+36     	; 0x2b2 <__vector_18+0x96>
			{
				case 0x04:
				// TO DO: Move this function out of ISR?
				getVector(r,h);
 28e:	20 91 35 40 	lds	r18, 0x4035	; 0x804035 <h>
 292:	30 91 36 40 	lds	r19, 0x4036	; 0x804036 <h+0x1>
 296:	40 91 37 40 	lds	r20, 0x4037	; 0x804037 <h+0x2>
 29a:	50 91 38 40 	lds	r21, 0x4038	; 0x804038 <h+0x3>
 29e:	60 91 19 40 	lds	r22, 0x4019	; 0x804019 <r>
 2a2:	70 91 1a 40 	lds	r23, 0x401A	; 0x80401a <r+0x1>
 2a6:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <r+0x2>
 2aa:	90 91 1c 40 	lds	r25, 0x401C	; 0x80401c <r+0x3>
 2ae:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <getVector>
				// TO DO: Function to set I2C address
				break;
			}
		}
	}
}
 2b2:	ff 91       	pop	r31
 2b4:	ef 91       	pop	r30
 2b6:	bf 91       	pop	r27
 2b8:	af 91       	pop	r26
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	7f 91       	pop	r23
 2c0:	6f 91       	pop	r22
 2c2:	5f 91       	pop	r21
 2c4:	4f 91       	pop	r20
 2c6:	3f 91       	pop	r19
 2c8:	2f 91       	pop	r18
 2ca:	0f 90       	pop	r0
 2cc:	0b be       	out	0x3b, r0	; 59
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <getVector>:
#include "../include/sun_sensor.h"
#include <avr/io.h>
#include <math.h>


void getVector(float r, float h){
 2d8:	4f 92       	push	r4
 2da:	5f 92       	push	r5
 2dc:	6f 92       	push	r6
 2de:	7f 92       	push	r7
 2e0:	8f 92       	push	r8
 2e2:	9f 92       	push	r9
 2e4:	af 92       	push	r10
 2e6:	bf 92       	push	r11
 2e8:	cf 92       	push	r12
 2ea:	df 92       	push	r13
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	28 97       	sbiw	r28, 0x08	; 8
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	6b 01       	movw	r12, r22
 300:	7c 01       	movw	r14, r24
 302:	2d 83       	std	Y+5, r18	; 0x05
 304:	3e 83       	std	Y+6, r19	; 0x06
 306:	4f 83       	std	Y+7, r20	; 0x07
 308:	58 87       	std	Y+8, r21	; 0x08
	
	A = 9;//ADC_read(diodeA);
 30a:	89 e0       	ldi	r24, 0x09	; 9
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	a0 e0       	ldi	r26, 0x00	; 0
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	80 93 08 40 	sts	0x4008, r24	; 0x804008 <A>
 316:	90 93 09 40 	sts	0x4009, r25	; 0x804009 <A+0x1>
 31a:	a0 93 0a 40 	sts	0x400A, r26	; 0x80400a <A+0x2>
 31e:	b0 93 0b 40 	sts	0x400B, r27	; 0x80400b <A+0x3>
	B = 3;//ADC_read(diodeB);
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	a0 e0       	ldi	r26, 0x00	; 0
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	80 93 15 40 	sts	0x4015, r24	; 0x804015 <B>
 32e:	90 93 16 40 	sts	0x4016, r25	; 0x804016 <B+0x1>
 332:	a0 93 17 40 	sts	0x4017, r26	; 0x804017 <B+0x2>
 336:	b0 93 18 40 	sts	0x4018, r27	; 0x804018 <B+0x3>
	C = 1;//ADC_read(diodeC);
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	40 93 21 40 	sts	0x4021, r20	; 0x804021 <C>
 346:	50 93 22 40 	sts	0x4022, r21	; 0x804022 <C+0x1>
 34a:	60 93 23 40 	sts	0x4023, r22	; 0x804023 <C+0x2>
 34e:	70 93 24 40 	sts	0x4024, r23	; 0x804024 <C+0x3>
	D = 3; //ADC_read(diodeD);
 352:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 356:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 35a:	a0 93 02 40 	sts	0x4002, r26	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
 35e:	b0 93 03 40 	sts	0x4003, r27	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
	
	x = (float)(B+C-A-D)/(A+B+C+D)*r;
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	5f eb       	ldi	r21, 0xBF	; 191
 36a:	c7 01       	movw	r24, r14
 36c:	b6 01       	movw	r22, r12
 36e:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 372:	4b 01       	movw	r8, r22
 374:	5c 01       	movw	r10, r24
 376:	60 93 04 40 	sts	0x4004, r22	; 0x804004 <x>
 37a:	70 93 05 40 	sts	0x4005, r23	; 0x804005 <x+0x1>
 37e:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <x+0x2>
 382:	90 93 07 40 	sts	0x4007, r25	; 0x804007 <x+0x3>
	y = (float)(A+B-C-D)/(A+B+C+D)*r;
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	5f e3       	ldi	r21, 0x3F	; 63
 38e:	c7 01       	movw	r24, r14
 390:	b6 01       	movw	r22, r12
 392:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 396:	6b 01       	movw	r12, r22
 398:	7c 01       	movw	r14, r24
 39a:	60 93 25 40 	sts	0x4025, r22	; 0x804025 <y>
 39e:	70 93 26 40 	sts	0x4026, r23	; 0x804026 <y+0x1>
 3a2:	80 93 27 40 	sts	0x4027, r24	; 0x804027 <y+0x2>
 3a6:	90 93 28 40 	sts	0x4028, r25	; 0x804028 <y+0x3>
	Converting x and y to spherical coordinate angles
	phi and theta, and correcting theta to range from 0 to 360
	depending on the current quadrant
	*/
	
	phi = atan(sqrt(pow(x,2)+pow(y,2))/h);
 3aa:	a5 01       	movw	r20, r10
 3ac:	94 01       	movw	r18, r8
 3ae:	c5 01       	movw	r24, r10
 3b0:	b4 01       	movw	r22, r8
 3b2:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 3b6:	2b 01       	movw	r4, r22
 3b8:	3c 01       	movw	r6, r24
 3ba:	a7 01       	movw	r20, r14
 3bc:	96 01       	movw	r18, r12
 3be:	c7 01       	movw	r24, r14
 3c0:	b6 01       	movw	r22, r12
 3c2:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 3c6:	69 83       	std	Y+1, r22	; 0x01
 3c8:	7a 83       	std	Y+2, r23	; 0x02
 3ca:	8b 83       	std	Y+3, r24	; 0x03
 3cc:	9c 83       	std	Y+4, r25	; 0x04
 3ce:	29 81       	ldd	r18, Y+1	; 0x01
 3d0:	3a 81       	ldd	r19, Y+2	; 0x02
 3d2:	4b 81       	ldd	r20, Y+3	; 0x03
 3d4:	5c 81       	ldd	r21, Y+4	; 0x04
 3d6:	c3 01       	movw	r24, r6
 3d8:	b2 01       	movw	r22, r4
 3da:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__addsf3>
 3de:	0e 94 b9 05 	call	0xb72	; 0xb72 <sqrt>
 3e2:	2d 81       	ldd	r18, Y+5	; 0x05
 3e4:	3e 81       	ldd	r19, Y+6	; 0x06
 3e6:	4f 81       	ldd	r20, Y+7	; 0x07
 3e8:	58 85       	ldd	r21, Y+8	; 0x08
 3ea:	0e 94 91 03 	call	0x722	; 0x722 <__divsf3>
 3ee:	0e 94 58 03 	call	0x6b0	; 0x6b0 <atan>
 3f2:	2b 01       	movw	r4, r22
 3f4:	3c 01       	movw	r6, r24
 3f6:	60 93 10 40 	sts	0x4010, r22	; 0x804010 <phi>
 3fa:	70 93 11 40 	sts	0x4011, r23	; 0x804011 <phi+0x1>
 3fe:	80 93 12 40 	sts	0x4012, r24	; 0x804012 <phi+0x2>
 402:	90 93 13 40 	sts	0x4013, r25	; 0x804013 <phi+0x3>

	if(x < 0)		      //-x,+y and -x,-y
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	a9 01       	movw	r20, r18
 40c:	c5 01       	movw	r24, r10
 40e:	b4 01       	movw	r22, r8
 410:	0e 94 87 03 	call	0x70e	; 0x70e <__cmpsf2>
 414:	88 23       	and	r24, r24
 416:	bc f4       	brge	.+46     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	{
		theta = atan(y/x)+M_PI;
 418:	a5 01       	movw	r20, r10
 41a:	94 01       	movw	r18, r8
 41c:	c7 01       	movw	r24, r14
 41e:	b6 01       	movw	r22, r12
 420:	0e 94 91 03 	call	0x722	; 0x722 <__divsf3>
 424:	0e 94 58 03 	call	0x6b0	; 0x6b0 <atan>
 428:	2b ed       	ldi	r18, 0xDB	; 219
 42a:	3f e0       	ldi	r19, 0x0F	; 15
 42c:	49 e4       	ldi	r20, 0x49	; 73
 42e:	50 e4       	ldi	r21, 0x40	; 64
 430:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__addsf3>
 434:	60 93 1d 40 	sts	0x401D, r22	; 0x80401d <theta>
 438:	70 93 1e 40 	sts	0x401E, r23	; 0x80401e <theta+0x1>
 43c:	80 93 1f 40 	sts	0x401F, r24	; 0x80401f <theta+0x2>
 440:	90 93 20 40 	sts	0x4020, r25	; 0x804020 <theta+0x3>
 444:	42 c0       	rjmp	.+132    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
	}
	else
	{
		if(y < 0)				//+x,-y
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	a9 01       	movw	r20, r18
 44c:	c7 01       	movw	r24, r14
 44e:	b6 01       	movw	r22, r12
 450:	0e 94 87 03 	call	0x70e	; 0x70e <__cmpsf2>
 454:	88 23       	and	r24, r24
 456:	bc f4       	brge	.+46     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		{
			theta = atan(y/x)+M_2_PI;
 458:	a5 01       	movw	r20, r10
 45a:	94 01       	movw	r18, r8
 45c:	c7 01       	movw	r24, r14
 45e:	b6 01       	movw	r22, r12
 460:	0e 94 91 03 	call	0x722	; 0x722 <__divsf3>
 464:	0e 94 58 03 	call	0x6b0	; 0x6b0 <atan>
 468:	23 e8       	ldi	r18, 0x83	; 131
 46a:	39 ef       	ldi	r19, 0xF9	; 249
 46c:	42 e2       	ldi	r20, 0x22	; 34
 46e:	5f e3       	ldi	r21, 0x3F	; 63
 470:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__addsf3>
 474:	60 93 1d 40 	sts	0x401D, r22	; 0x80401d <theta>
 478:	70 93 1e 40 	sts	0x401E, r23	; 0x80401e <theta+0x1>
 47c:	80 93 1f 40 	sts	0x401F, r24	; 0x80401f <theta+0x2>
 480:	90 93 20 40 	sts	0x4020, r25	; 0x804020 <theta+0x3>
 484:	22 c0       	rjmp	.+68     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
		}
		
		else if(y > 0)	//+x,+y
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	a9 01       	movw	r20, r18
 48c:	c7 01       	movw	r24, r14
 48e:	b6 01       	movw	r22, r12
 490:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__gesf2>
 494:	18 16       	cp	r1, r24
 496:	8c f4       	brge	.+34     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		{
			theta = atan(y/x);
 498:	a5 01       	movw	r20, r10
 49a:	94 01       	movw	r18, r8
 49c:	c7 01       	movw	r24, r14
 49e:	b6 01       	movw	r22, r12
 4a0:	0e 94 91 03 	call	0x722	; 0x722 <__divsf3>
 4a4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <atan>
 4a8:	60 93 1d 40 	sts	0x401D, r22	; 0x80401d <theta>
 4ac:	70 93 1e 40 	sts	0x401E, r23	; 0x80401e <theta+0x1>
 4b0:	80 93 1f 40 	sts	0x401F, r24	; 0x80401f <theta+0x2>
 4b4:	90 93 20 40 	sts	0x4020, r25	; 0x804020 <theta+0x3>
 4b8:	08 c0       	rjmp	.+16     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
		}
		else						//x=y=0
		{
			theta = 0;
 4ba:	10 92 1d 40 	sts	0x401D, r1	; 0x80401d <theta>
 4be:	10 92 1e 40 	sts	0x401E, r1	; 0x80401e <theta+0x1>
 4c2:	10 92 1f 40 	sts	0x401F, r1	; 0x80401f <theta+0x2>
 4c6:	10 92 20 40 	sts	0x4020, r1	; 0x804020 <theta+0x3>
	}
	/*
	Converting phi and theta to degrees and loading into array
	as 16-bit values
	*/
	angles[0] = (uint16_t)round((phi*180/M_PI*100));
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	44 e3       	ldi	r20, 0x34	; 52
 4d0:	53 e4       	ldi	r21, 0x43	; 67
 4d2:	c3 01       	movw	r24, r6
 4d4:	b2 01       	movw	r22, r4
 4d6:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 4da:	2b ed       	ldi	r18, 0xDB	; 219
 4dc:	3f e0       	ldi	r19, 0x0F	; 15
 4de:	49 e4       	ldi	r20, 0x49	; 73
 4e0:	50 e4       	ldi	r21, 0x40	; 64
 4e2:	0e 94 91 03 	call	0x722	; 0x722 <__divsf3>
 4e6:	20 e0       	ldi	r18, 0x00	; 0
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	48 ec       	ldi	r20, 0xC8	; 200
 4ec:	52 e4       	ldi	r21, 0x42	; 66
 4ee:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 4f2:	0e 94 87 05 	call	0xb0e	; 0xb0e <round>
 4f6:	0e 94 03 04 	call	0x806	; 0x806 <__fixunssfsi>
 4fa:	ec e0       	ldi	r30, 0x0C	; 12
 4fc:	f0 e4       	ldi	r31, 0x40	; 64
 4fe:	60 83       	st	Z, r22
 500:	71 83       	std	Z+1, r23	; 0x01
	angles[1] = (uint16_t)round((theta*180/M_PI*100));
 502:	c0 90 1d 40 	lds	r12, 0x401D	; 0x80401d <theta>
 506:	d0 90 1e 40 	lds	r13, 0x401E	; 0x80401e <theta+0x1>
 50a:	e0 90 1f 40 	lds	r14, 0x401F	; 0x80401f <theta+0x2>
 50e:	f0 90 20 40 	lds	r15, 0x4020	; 0x804020 <theta+0x3>
 512:	20 e0       	ldi	r18, 0x00	; 0
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	44 e3       	ldi	r20, 0x34	; 52
 518:	53 e4       	ldi	r21, 0x43	; 67
 51a:	c7 01       	movw	r24, r14
 51c:	b6 01       	movw	r22, r12
 51e:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 522:	2b ed       	ldi	r18, 0xDB	; 219
 524:	3f e0       	ldi	r19, 0x0F	; 15
 526:	49 e4       	ldi	r20, 0x49	; 73
 528:	50 e4       	ldi	r21, 0x40	; 64
 52a:	0e 94 91 03 	call	0x722	; 0x722 <__divsf3>
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	48 ec       	ldi	r20, 0xC8	; 200
 534:	52 e4       	ldi	r21, 0x42	; 66
 536:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 53a:	0e 94 87 05 	call	0xb0e	; 0xb0e <round>
 53e:	0e 94 03 04 	call	0x806	; 0x806 <__fixunssfsi>
 542:	60 93 0e 40 	sts	0x400E, r22	; 0x80400e <angles+0x2>
 546:	70 93 0f 40 	sts	0x400F, r23	; 0x80400f <angles+0x3>
	/*
	Converting spherical coordinates into a vector R[xv,yv,zv]
	*/
	R_vect[0] = sin(phi)*cos(theta);  //xv
 54a:	c3 01       	movw	r24, r6
 54c:	b2 01       	movw	r22, r4
 54e:	0e 94 ab 05 	call	0xb56	; 0xb56 <sin>
 552:	4b 01       	movw	r8, r22
 554:	5c 01       	movw	r10, r24
 556:	c7 01       	movw	r24, r14
 558:	b6 01       	movw	r22, r12
 55a:	0e 94 8c 03 	call	0x718	; 0x718 <cos>
 55e:	9b 01       	movw	r18, r22
 560:	ac 01       	movw	r20, r24
 562:	c5 01       	movw	r24, r10
 564:	b4 01       	movw	r22, r8
 566:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 56a:	e9 e2       	ldi	r30, 0x29	; 41
 56c:	f0 e4       	ldi	r31, 0x40	; 64
 56e:	60 83       	st	Z, r22
 570:	71 83       	std	Z+1, r23	; 0x01
 572:	82 83       	std	Z+2, r24	; 0x02
 574:	93 83       	std	Z+3, r25	; 0x03
	R_vect[1] = sin(phi)*sin(theta);  //yv
 576:	c7 01       	movw	r24, r14
 578:	b6 01       	movw	r22, r12
 57a:	0e 94 ab 05 	call	0xb56	; 0xb56 <sin>
 57e:	9b 01       	movw	r18, r22
 580:	ac 01       	movw	r20, r24
 582:	c5 01       	movw	r24, r10
 584:	b4 01       	movw	r22, r8
 586:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 58a:	60 93 2d 40 	sts	0x402D, r22	; 0x80402d <R_vect+0x4>
 58e:	70 93 2e 40 	sts	0x402E, r23	; 0x80402e <R_vect+0x5>
 592:	80 93 2f 40 	sts	0x402F, r24	; 0x80402f <R_vect+0x6>
 596:	90 93 30 40 	sts	0x4030, r25	; 0x804030 <R_vect+0x7>
	R_vect[2] = cos(phi);             //zv
 59a:	c3 01       	movw	r24, r6
 59c:	b2 01       	movw	r22, r4
 59e:	0e 94 8c 03 	call	0x718	; 0x718 <cos>
 5a2:	60 93 31 40 	sts	0x4031, r22	; 0x804031 <R_vect+0x8>
 5a6:	70 93 32 40 	sts	0x4032, r23	; 0x804032 <R_vect+0x9>
 5aa:	80 93 33 40 	sts	0x4033, r24	; 0x804033 <R_vect+0xa>
 5ae:	90 93 34 40 	sts	0x4034, r25	; 0x804034 <R_vect+0xb>
 5b2:	28 96       	adiw	r28, 0x08	; 8
 5b4:	cd bf       	out	0x3d, r28	; 61
 5b6:	de bf       	out	0x3e, r29	; 62
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	df 90       	pop	r13
 5c2:	cf 90       	pop	r12
 5c4:	bf 90       	pop	r11
 5c6:	af 90       	pop	r10
 5c8:	9f 90       	pop	r9
 5ca:	8f 90       	pop	r8
 5cc:	7f 90       	pop	r7
 5ce:	6f 90       	pop	r6
 5d0:	5f 90       	pop	r5
 5d2:	4f 90       	pop	r4
 5d4:	08 95       	ret

000005d6 <__subsf3>:
 5d6:	50 58       	subi	r21, 0x80	; 128

000005d8 <__addsf3>:
 5d8:	bb 27       	eor	r27, r27
 5da:	aa 27       	eor	r26, r26
 5dc:	0e 94 03 03 	call	0x606	; 0x606 <__addsf3x>
 5e0:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_round>
 5e4:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_pscA>
 5e8:	38 f0       	brcs	.+14     	; 0x5f8 <__addsf3+0x20>
 5ea:	0e 94 8d 04 	call	0x91a	; 0x91a <__fp_pscB>
 5ee:	20 f0       	brcs	.+8      	; 0x5f8 <__addsf3+0x20>
 5f0:	39 f4       	brne	.+14     	; 0x600 <__addsf3+0x28>
 5f2:	9f 3f       	cpi	r25, 0xFF	; 255
 5f4:	19 f4       	brne	.+6      	; 0x5fc <__addsf3+0x24>
 5f6:	26 f4       	brtc	.+8      	; 0x600 <__addsf3+0x28>
 5f8:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_nan>
 5fc:	0e f4       	brtc	.+2      	; 0x600 <__addsf3+0x28>
 5fe:	e0 95       	com	r30
 600:	e7 fb       	bst	r30, 7
 602:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_inf>

00000606 <__addsf3x>:
 606:	e9 2f       	mov	r30, r25
 608:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_split3>
 60c:	58 f3       	brcs	.-42     	; 0x5e4 <__addsf3+0xc>
 60e:	ba 17       	cp	r27, r26
 610:	62 07       	cpc	r22, r18
 612:	73 07       	cpc	r23, r19
 614:	84 07       	cpc	r24, r20
 616:	95 07       	cpc	r25, r21
 618:	20 f0       	brcs	.+8      	; 0x622 <__addsf3x+0x1c>
 61a:	79 f4       	brne	.+30     	; 0x63a <__addsf3x+0x34>
 61c:	a6 f5       	brtc	.+104    	; 0x686 <__addsf3x+0x80>
 61e:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_zero>
 622:	0e f4       	brtc	.+2      	; 0x626 <__addsf3x+0x20>
 624:	e0 95       	com	r30
 626:	0b 2e       	mov	r0, r27
 628:	ba 2f       	mov	r27, r26
 62a:	a0 2d       	mov	r26, r0
 62c:	0b 01       	movw	r0, r22
 62e:	b9 01       	movw	r22, r18
 630:	90 01       	movw	r18, r0
 632:	0c 01       	movw	r0, r24
 634:	ca 01       	movw	r24, r20
 636:	a0 01       	movw	r20, r0
 638:	11 24       	eor	r1, r1
 63a:	ff 27       	eor	r31, r31
 63c:	59 1b       	sub	r21, r25
 63e:	99 f0       	breq	.+38     	; 0x666 <__addsf3x+0x60>
 640:	59 3f       	cpi	r21, 0xF9	; 249
 642:	50 f4       	brcc	.+20     	; 0x658 <__addsf3x+0x52>
 644:	50 3e       	cpi	r21, 0xE0	; 224
 646:	68 f1       	brcs	.+90     	; 0x6a2 <__addsf3x+0x9c>
 648:	1a 16       	cp	r1, r26
 64a:	f0 40       	sbci	r31, 0x00	; 0
 64c:	a2 2f       	mov	r26, r18
 64e:	23 2f       	mov	r18, r19
 650:	34 2f       	mov	r19, r20
 652:	44 27       	eor	r20, r20
 654:	58 5f       	subi	r21, 0xF8	; 248
 656:	f3 cf       	rjmp	.-26     	; 0x63e <__addsf3x+0x38>
 658:	46 95       	lsr	r20
 65a:	37 95       	ror	r19
 65c:	27 95       	ror	r18
 65e:	a7 95       	ror	r26
 660:	f0 40       	sbci	r31, 0x00	; 0
 662:	53 95       	inc	r21
 664:	c9 f7       	brne	.-14     	; 0x658 <__addsf3x+0x52>
 666:	7e f4       	brtc	.+30     	; 0x686 <__addsf3x+0x80>
 668:	1f 16       	cp	r1, r31
 66a:	ba 0b       	sbc	r27, r26
 66c:	62 0b       	sbc	r22, r18
 66e:	73 0b       	sbc	r23, r19
 670:	84 0b       	sbc	r24, r20
 672:	ba f0       	brmi	.+46     	; 0x6a2 <__addsf3x+0x9c>
 674:	91 50       	subi	r25, 0x01	; 1
 676:	a1 f0       	breq	.+40     	; 0x6a0 <__addsf3x+0x9a>
 678:	ff 0f       	add	r31, r31
 67a:	bb 1f       	adc	r27, r27
 67c:	66 1f       	adc	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	c2 f7       	brpl	.-16     	; 0x674 <__addsf3x+0x6e>
 684:	0e c0       	rjmp	.+28     	; 0x6a2 <__addsf3x+0x9c>
 686:	ba 0f       	add	r27, r26
 688:	62 1f       	adc	r22, r18
 68a:	73 1f       	adc	r23, r19
 68c:	84 1f       	adc	r24, r20
 68e:	48 f4       	brcc	.+18     	; 0x6a2 <__addsf3x+0x9c>
 690:	87 95       	ror	r24
 692:	77 95       	ror	r23
 694:	67 95       	ror	r22
 696:	b7 95       	ror	r27
 698:	f7 95       	ror	r31
 69a:	9e 3f       	cpi	r25, 0xFE	; 254
 69c:	08 f0       	brcs	.+2      	; 0x6a0 <__addsf3x+0x9a>
 69e:	b0 cf       	rjmp	.-160    	; 0x600 <__addsf3+0x28>
 6a0:	93 95       	inc	r25
 6a2:	88 0f       	add	r24, r24
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__addsf3x+0xa2>
 6a6:	99 27       	eor	r25, r25
 6a8:	ee 0f       	add	r30, r30
 6aa:	97 95       	ror	r25
 6ac:	87 95       	ror	r24
 6ae:	08 95       	ret

000006b0 <atan>:
 6b0:	df 93       	push	r29
 6b2:	dd 27       	eor	r29, r29
 6b4:	b9 2f       	mov	r27, r25
 6b6:	bf 77       	andi	r27, 0x7F	; 127
 6b8:	40 e8       	ldi	r20, 0x80	; 128
 6ba:	5f e3       	ldi	r21, 0x3F	; 63
 6bc:	16 16       	cp	r1, r22
 6be:	17 06       	cpc	r1, r23
 6c0:	48 07       	cpc	r20, r24
 6c2:	5b 07       	cpc	r21, r27
 6c4:	18 f4       	brcc	.+6      	; 0x6cc <atan+0x1c>
 6c6:	d9 2f       	mov	r29, r25
 6c8:	0e 94 12 05 	call	0xa24	; 0xa24 <inverse>
 6cc:	9f 93       	push	r25
 6ce:	8f 93       	push	r24
 6d0:	7f 93       	push	r23
 6d2:	6f 93       	push	r22
 6d4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <square>
 6d8:	e4 ef       	ldi	r30, 0xF4	; 244
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	0e 94 5f 04 	call	0x8be	; 0x8be <__fp_powser>
 6e0:	0e 94 bf 04 	call	0x97e	; 0x97e <__fp_round>
 6e4:	2f 91       	pop	r18
 6e6:	3f 91       	pop	r19
 6e8:	4f 91       	pop	r20
 6ea:	5f 91       	pop	r21
 6ec:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__mulsf3x>
 6f0:	dd 23       	and	r29, r29
 6f2:	51 f0       	breq	.+20     	; 0x708 <atan+0x58>
 6f4:	90 58       	subi	r25, 0x80	; 128
 6f6:	a2 ea       	ldi	r26, 0xA2	; 162
 6f8:	2a ed       	ldi	r18, 0xDA	; 218
 6fa:	3f e0       	ldi	r19, 0x0F	; 15
 6fc:	49 ec       	ldi	r20, 0xC9	; 201
 6fe:	5f e3       	ldi	r21, 0x3F	; 63
 700:	d0 78       	andi	r29, 0x80	; 128
 702:	5d 27       	eor	r21, r29
 704:	0e 94 03 03 	call	0x606	; 0x606 <__addsf3x>
 708:	df 91       	pop	r29
 70a:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_round>

0000070e <__cmpsf2>:
 70e:	0e 94 32 04 	call	0x864	; 0x864 <__fp_cmp>
 712:	08 f4       	brcc	.+2      	; 0x716 <__cmpsf2+0x8>
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	08 95       	ret

00000718 <cos>:
 718:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_rempio2>
 71c:	e3 95       	inc	r30
 71e:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__fp_sinus>

00000722 <__divsf3>:
 722:	0e 94 a5 03 	call	0x74a	; 0x74a <__divsf3x>
 726:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_round>
 72a:	0e 94 8d 04 	call	0x91a	; 0x91a <__fp_pscB>
 72e:	58 f0       	brcs	.+22     	; 0x746 <__divsf3+0x24>
 730:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_pscA>
 734:	40 f0       	brcs	.+16     	; 0x746 <__divsf3+0x24>
 736:	29 f4       	brne	.+10     	; 0x742 <__divsf3+0x20>
 738:	5f 3f       	cpi	r21, 0xFF	; 255
 73a:	29 f0       	breq	.+10     	; 0x746 <__divsf3+0x24>
 73c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_inf>
 740:	51 11       	cpse	r21, r1
 742:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_szero>
 746:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_nan>

0000074a <__divsf3x>:
 74a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_split3>
 74e:	68 f3       	brcs	.-38     	; 0x72a <__divsf3+0x8>

00000750 <__divsf3_pse>:
 750:	99 23       	and	r25, r25
 752:	b1 f3       	breq	.-20     	; 0x740 <__divsf3+0x1e>
 754:	55 23       	and	r21, r21
 756:	91 f3       	breq	.-28     	; 0x73c <__divsf3+0x1a>
 758:	95 1b       	sub	r25, r21
 75a:	55 0b       	sbc	r21, r21
 75c:	bb 27       	eor	r27, r27
 75e:	aa 27       	eor	r26, r26
 760:	62 17       	cp	r22, r18
 762:	73 07       	cpc	r23, r19
 764:	84 07       	cpc	r24, r20
 766:	38 f0       	brcs	.+14     	; 0x776 <__divsf3_pse+0x26>
 768:	9f 5f       	subi	r25, 0xFF	; 255
 76a:	5f 4f       	sbci	r21, 0xFF	; 255
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	44 1f       	adc	r20, r20
 772:	aa 1f       	adc	r26, r26
 774:	a9 f3       	breq	.-22     	; 0x760 <__divsf3_pse+0x10>
 776:	35 d0       	rcall	.+106    	; 0x7e2 <__divsf3_pse+0x92>
 778:	0e 2e       	mov	r0, r30
 77a:	3a f0       	brmi	.+14     	; 0x78a <__divsf3_pse+0x3a>
 77c:	e0 e8       	ldi	r30, 0x80	; 128
 77e:	32 d0       	rcall	.+100    	; 0x7e4 <__divsf3_pse+0x94>
 780:	91 50       	subi	r25, 0x01	; 1
 782:	50 40       	sbci	r21, 0x00	; 0
 784:	e6 95       	lsr	r30
 786:	00 1c       	adc	r0, r0
 788:	ca f7       	brpl	.-14     	; 0x77c <__divsf3_pse+0x2c>
 78a:	2b d0       	rcall	.+86     	; 0x7e2 <__divsf3_pse+0x92>
 78c:	fe 2f       	mov	r31, r30
 78e:	29 d0       	rcall	.+82     	; 0x7e2 <__divsf3_pse+0x92>
 790:	66 0f       	add	r22, r22
 792:	77 1f       	adc	r23, r23
 794:	88 1f       	adc	r24, r24
 796:	bb 1f       	adc	r27, r27
 798:	26 17       	cp	r18, r22
 79a:	37 07       	cpc	r19, r23
 79c:	48 07       	cpc	r20, r24
 79e:	ab 07       	cpc	r26, r27
 7a0:	b0 e8       	ldi	r27, 0x80	; 128
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <__divsf3_pse+0x56>
 7a4:	bb 0b       	sbc	r27, r27
 7a6:	80 2d       	mov	r24, r0
 7a8:	bf 01       	movw	r22, r30
 7aa:	ff 27       	eor	r31, r31
 7ac:	93 58       	subi	r25, 0x83	; 131
 7ae:	5f 4f       	sbci	r21, 0xFF	; 255
 7b0:	3a f0       	brmi	.+14     	; 0x7c0 <__divsf3_pse+0x70>
 7b2:	9e 3f       	cpi	r25, 0xFE	; 254
 7b4:	51 05       	cpc	r21, r1
 7b6:	78 f0       	brcs	.+30     	; 0x7d6 <__divsf3_pse+0x86>
 7b8:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_inf>
 7bc:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_szero>
 7c0:	5f 3f       	cpi	r21, 0xFF	; 255
 7c2:	e4 f3       	brlt	.-8      	; 0x7bc <__divsf3_pse+0x6c>
 7c4:	98 3e       	cpi	r25, 0xE8	; 232
 7c6:	d4 f3       	brlt	.-12     	; 0x7bc <__divsf3_pse+0x6c>
 7c8:	86 95       	lsr	r24
 7ca:	77 95       	ror	r23
 7cc:	67 95       	ror	r22
 7ce:	b7 95       	ror	r27
 7d0:	f7 95       	ror	r31
 7d2:	9f 5f       	subi	r25, 0xFF	; 255
 7d4:	c9 f7       	brne	.-14     	; 0x7c8 <__divsf3_pse+0x78>
 7d6:	88 0f       	add	r24, r24
 7d8:	91 1d       	adc	r25, r1
 7da:	96 95       	lsr	r25
 7dc:	87 95       	ror	r24
 7de:	97 f9       	bld	r25, 7
 7e0:	08 95       	ret
 7e2:	e1 e0       	ldi	r30, 0x01	; 1
 7e4:	66 0f       	add	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	bb 1f       	adc	r27, r27
 7ec:	62 17       	cp	r22, r18
 7ee:	73 07       	cpc	r23, r19
 7f0:	84 07       	cpc	r24, r20
 7f2:	ba 07       	cpc	r27, r26
 7f4:	20 f0       	brcs	.+8      	; 0x7fe <__divsf3_pse+0xae>
 7f6:	62 1b       	sub	r22, r18
 7f8:	73 0b       	sbc	r23, r19
 7fa:	84 0b       	sbc	r24, r20
 7fc:	ba 0b       	sbc	r27, r26
 7fe:	ee 1f       	adc	r30, r30
 800:	88 f7       	brcc	.-30     	; 0x7e4 <__divsf3_pse+0x94>
 802:	e0 95       	com	r30
 804:	08 95       	ret

00000806 <__fixunssfsi>:
 806:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_splitA>
 80a:	88 f0       	brcs	.+34     	; 0x82e <__fixunssfsi+0x28>
 80c:	9f 57       	subi	r25, 0x7F	; 127
 80e:	98 f0       	brcs	.+38     	; 0x836 <__fixunssfsi+0x30>
 810:	b9 2f       	mov	r27, r25
 812:	99 27       	eor	r25, r25
 814:	b7 51       	subi	r27, 0x17	; 23
 816:	b0 f0       	brcs	.+44     	; 0x844 <__fixunssfsi+0x3e>
 818:	e1 f0       	breq	.+56     	; 0x852 <__fixunssfsi+0x4c>
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	1a f0       	brmi	.+6      	; 0x82a <__fixunssfsi+0x24>
 824:	ba 95       	dec	r27
 826:	c9 f7       	brne	.-14     	; 0x81a <__fixunssfsi+0x14>
 828:	14 c0       	rjmp	.+40     	; 0x852 <__fixunssfsi+0x4c>
 82a:	b1 30       	cpi	r27, 0x01	; 1
 82c:	91 f0       	breq	.+36     	; 0x852 <__fixunssfsi+0x4c>
 82e:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_zero>
 832:	b1 e0       	ldi	r27, 0x01	; 1
 834:	08 95       	ret
 836:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_zero>
 83a:	67 2f       	mov	r22, r23
 83c:	78 2f       	mov	r23, r24
 83e:	88 27       	eor	r24, r24
 840:	b8 5f       	subi	r27, 0xF8	; 248
 842:	39 f0       	breq	.+14     	; 0x852 <__fixunssfsi+0x4c>
 844:	b9 3f       	cpi	r27, 0xF9	; 249
 846:	cc f3       	brlt	.-14     	; 0x83a <__fixunssfsi+0x34>
 848:	86 95       	lsr	r24
 84a:	77 95       	ror	r23
 84c:	67 95       	ror	r22
 84e:	b3 95       	inc	r27
 850:	d9 f7       	brne	.-10     	; 0x848 <__fixunssfsi+0x42>
 852:	3e f4       	brtc	.+14     	; 0x862 <__fixunssfsi+0x5c>
 854:	90 95       	com	r25
 856:	80 95       	com	r24
 858:	70 95       	com	r23
 85a:	61 95       	neg	r22
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	08 95       	ret

00000864 <__fp_cmp>:
 864:	99 0f       	add	r25, r25
 866:	00 08       	sbc	r0, r0
 868:	55 0f       	add	r21, r21
 86a:	aa 0b       	sbc	r26, r26
 86c:	e0 e8       	ldi	r30, 0x80	; 128
 86e:	fe ef       	ldi	r31, 0xFE	; 254
 870:	16 16       	cp	r1, r22
 872:	17 06       	cpc	r1, r23
 874:	e8 07       	cpc	r30, r24
 876:	f9 07       	cpc	r31, r25
 878:	c0 f0       	brcs	.+48     	; 0x8aa <__fp_cmp+0x46>
 87a:	12 16       	cp	r1, r18
 87c:	13 06       	cpc	r1, r19
 87e:	e4 07       	cpc	r30, r20
 880:	f5 07       	cpc	r31, r21
 882:	98 f0       	brcs	.+38     	; 0x8aa <__fp_cmp+0x46>
 884:	62 1b       	sub	r22, r18
 886:	73 0b       	sbc	r23, r19
 888:	84 0b       	sbc	r24, r20
 88a:	95 0b       	sbc	r25, r21
 88c:	39 f4       	brne	.+14     	; 0x89c <__fp_cmp+0x38>
 88e:	0a 26       	eor	r0, r26
 890:	61 f0       	breq	.+24     	; 0x8aa <__fp_cmp+0x46>
 892:	23 2b       	or	r18, r19
 894:	24 2b       	or	r18, r20
 896:	25 2b       	or	r18, r21
 898:	21 f4       	brne	.+8      	; 0x8a2 <__fp_cmp+0x3e>
 89a:	08 95       	ret
 89c:	0a 26       	eor	r0, r26
 89e:	09 f4       	brne	.+2      	; 0x8a2 <__fp_cmp+0x3e>
 8a0:	a1 40       	sbci	r26, 0x01	; 1
 8a2:	a6 95       	lsr	r26
 8a4:	8f ef       	ldi	r24, 0xFF	; 255
 8a6:	81 1d       	adc	r24, r1
 8a8:	81 1d       	adc	r24, r1
 8aa:	08 95       	ret

000008ac <__fp_inf>:
 8ac:	97 f9       	bld	r25, 7
 8ae:	9f 67       	ori	r25, 0x7F	; 127
 8b0:	80 e8       	ldi	r24, 0x80	; 128
 8b2:	70 e0       	ldi	r23, 0x00	; 0
 8b4:	60 e0       	ldi	r22, 0x00	; 0
 8b6:	08 95       	ret

000008b8 <__fp_nan>:
 8b8:	9f ef       	ldi	r25, 0xFF	; 255
 8ba:	80 ec       	ldi	r24, 0xC0	; 192
 8bc:	08 95       	ret

000008be <__fp_powser>:
 8be:	df 93       	push	r29
 8c0:	cf 93       	push	r28
 8c2:	1f 93       	push	r17
 8c4:	0f 93       	push	r16
 8c6:	ff 92       	push	r15
 8c8:	ef 92       	push	r14
 8ca:	df 92       	push	r13
 8cc:	7b 01       	movw	r14, r22
 8ce:	8c 01       	movw	r16, r24
 8d0:	68 94       	set
 8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <__fp_powser+0x22>
 8d4:	da 2e       	mov	r13, r26
 8d6:	ef 01       	movw	r28, r30
 8d8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__mulsf3x>
 8dc:	fe 01       	movw	r30, r28
 8de:	e8 94       	clt
 8e0:	a5 91       	lpm	r26, Z+
 8e2:	25 91       	lpm	r18, Z+
 8e4:	35 91       	lpm	r19, Z+
 8e6:	45 91       	lpm	r20, Z+
 8e8:	55 91       	lpm	r21, Z+
 8ea:	a6 f3       	brts	.-24     	; 0x8d4 <__fp_powser+0x16>
 8ec:	ef 01       	movw	r28, r30
 8ee:	0e 94 03 03 	call	0x606	; 0x606 <__addsf3x>
 8f2:	fe 01       	movw	r30, r28
 8f4:	97 01       	movw	r18, r14
 8f6:	a8 01       	movw	r20, r16
 8f8:	da 94       	dec	r13
 8fa:	69 f7       	brne	.-38     	; 0x8d6 <__fp_powser+0x18>
 8fc:	df 90       	pop	r13
 8fe:	ef 90       	pop	r14
 900:	ff 90       	pop	r15
 902:	0f 91       	pop	r16
 904:	1f 91       	pop	r17
 906:	cf 91       	pop	r28
 908:	df 91       	pop	r29
 90a:	08 95       	ret

0000090c <__fp_pscA>:
 90c:	00 24       	eor	r0, r0
 90e:	0a 94       	dec	r0
 910:	16 16       	cp	r1, r22
 912:	17 06       	cpc	r1, r23
 914:	18 06       	cpc	r1, r24
 916:	09 06       	cpc	r0, r25
 918:	08 95       	ret

0000091a <__fp_pscB>:
 91a:	00 24       	eor	r0, r0
 91c:	0a 94       	dec	r0
 91e:	12 16       	cp	r1, r18
 920:	13 06       	cpc	r1, r19
 922:	14 06       	cpc	r1, r20
 924:	05 06       	cpc	r0, r21
 926:	08 95       	ret
 928:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_nan>

0000092c <__fp_rempio2>:
 92c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_splitA>
 930:	d8 f3       	brcs	.-10     	; 0x928 <__fp_pscB+0xe>
 932:	e8 94       	clt
 934:	e0 e0       	ldi	r30, 0x00	; 0
 936:	bb 27       	eor	r27, r27
 938:	9f 57       	subi	r25, 0x7F	; 127
 93a:	f0 f0       	brcs	.+60     	; 0x978 <__fp_rempio2+0x4c>
 93c:	2a ed       	ldi	r18, 0xDA	; 218
 93e:	3f e0       	ldi	r19, 0x0F	; 15
 940:	49 ec       	ldi	r20, 0xC9	; 201
 942:	06 c0       	rjmp	.+12     	; 0x950 <__fp_rempio2+0x24>
 944:	ee 0f       	add	r30, r30
 946:	bb 0f       	add	r27, r27
 948:	66 1f       	adc	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	28 f0       	brcs	.+10     	; 0x95a <__fp_rempio2+0x2e>
 950:	b2 3a       	cpi	r27, 0xA2	; 162
 952:	62 07       	cpc	r22, r18
 954:	73 07       	cpc	r23, r19
 956:	84 07       	cpc	r24, r20
 958:	28 f0       	brcs	.+10     	; 0x964 <__fp_rempio2+0x38>
 95a:	b2 5a       	subi	r27, 0xA2	; 162
 95c:	62 0b       	sbc	r22, r18
 95e:	73 0b       	sbc	r23, r19
 960:	84 0b       	sbc	r24, r20
 962:	e3 95       	inc	r30
 964:	9a 95       	dec	r25
 966:	72 f7       	brpl	.-36     	; 0x944 <__fp_rempio2+0x18>
 968:	80 38       	cpi	r24, 0x80	; 128
 96a:	30 f4       	brcc	.+12     	; 0x978 <__fp_rempio2+0x4c>
 96c:	9a 95       	dec	r25
 96e:	bb 0f       	add	r27, r27
 970:	66 1f       	adc	r22, r22
 972:	77 1f       	adc	r23, r23
 974:	88 1f       	adc	r24, r24
 976:	d2 f7       	brpl	.-12     	; 0x96c <__fp_rempio2+0x40>
 978:	90 48       	sbci	r25, 0x80	; 128
 97a:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_mpack_finite>

0000097e <__fp_round>:
 97e:	09 2e       	mov	r0, r25
 980:	03 94       	inc	r0
 982:	00 0c       	add	r0, r0
 984:	11 f4       	brne	.+4      	; 0x98a <__fp_round+0xc>
 986:	88 23       	and	r24, r24
 988:	52 f0       	brmi	.+20     	; 0x99e <__fp_round+0x20>
 98a:	bb 0f       	add	r27, r27
 98c:	40 f4       	brcc	.+16     	; 0x99e <__fp_round+0x20>
 98e:	bf 2b       	or	r27, r31
 990:	11 f4       	brne	.+4      	; 0x996 <__fp_round+0x18>
 992:	60 ff       	sbrs	r22, 0
 994:	04 c0       	rjmp	.+8      	; 0x99e <__fp_round+0x20>
 996:	6f 5f       	subi	r22, 0xFF	; 255
 998:	7f 4f       	sbci	r23, 0xFF	; 255
 99a:	8f 4f       	sbci	r24, 0xFF	; 255
 99c:	9f 4f       	sbci	r25, 0xFF	; 255
 99e:	08 95       	ret

000009a0 <__fp_sinus>:
 9a0:	ef 93       	push	r30
 9a2:	e0 ff       	sbrs	r30, 0
 9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <__fp_sinus+0x14>
 9a6:	a2 ea       	ldi	r26, 0xA2	; 162
 9a8:	2a ed       	ldi	r18, 0xDA	; 218
 9aa:	3f e0       	ldi	r19, 0x0F	; 15
 9ac:	49 ec       	ldi	r20, 0xC9	; 201
 9ae:	5f eb       	ldi	r21, 0xBF	; 191
 9b0:	0e 94 03 03 	call	0x606	; 0x606 <__addsf3x>
 9b4:	0e 94 bf 04 	call	0x97e	; 0x97e <__fp_round>
 9b8:	0f 90       	pop	r0
 9ba:	03 94       	inc	r0
 9bc:	01 fc       	sbrc	r0, 1
 9be:	90 58       	subi	r25, 0x80	; 128
 9c0:	e1 e2       	ldi	r30, 0x21	; 33
 9c2:	f1 e0       	ldi	r31, 0x01	; 1
 9c4:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_powsodd>

000009c8 <__fp_split3>:
 9c8:	57 fd       	sbrc	r21, 7
 9ca:	90 58       	subi	r25, 0x80	; 128
 9cc:	44 0f       	add	r20, r20
 9ce:	55 1f       	adc	r21, r21
 9d0:	59 f0       	breq	.+22     	; 0x9e8 <__fp_splitA+0x10>
 9d2:	5f 3f       	cpi	r21, 0xFF	; 255
 9d4:	71 f0       	breq	.+28     	; 0x9f2 <__fp_splitA+0x1a>
 9d6:	47 95       	ror	r20

000009d8 <__fp_splitA>:
 9d8:	88 0f       	add	r24, r24
 9da:	97 fb       	bst	r25, 7
 9dc:	99 1f       	adc	r25, r25
 9de:	61 f0       	breq	.+24     	; 0x9f8 <__fp_splitA+0x20>
 9e0:	9f 3f       	cpi	r25, 0xFF	; 255
 9e2:	79 f0       	breq	.+30     	; 0xa02 <__fp_splitA+0x2a>
 9e4:	87 95       	ror	r24
 9e6:	08 95       	ret
 9e8:	12 16       	cp	r1, r18
 9ea:	13 06       	cpc	r1, r19
 9ec:	14 06       	cpc	r1, r20
 9ee:	55 1f       	adc	r21, r21
 9f0:	f2 cf       	rjmp	.-28     	; 0x9d6 <__fp_split3+0xe>
 9f2:	46 95       	lsr	r20
 9f4:	f1 df       	rcall	.-30     	; 0x9d8 <__fp_splitA>
 9f6:	08 c0       	rjmp	.+16     	; 0xa08 <__fp_splitA+0x30>
 9f8:	16 16       	cp	r1, r22
 9fa:	17 06       	cpc	r1, r23
 9fc:	18 06       	cpc	r1, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	f1 cf       	rjmp	.-30     	; 0x9e4 <__fp_splitA+0xc>
 a02:	86 95       	lsr	r24
 a04:	71 05       	cpc	r23, r1
 a06:	61 05       	cpc	r22, r1
 a08:	08 94       	sec
 a0a:	08 95       	ret

00000a0c <__fp_zero>:
 a0c:	e8 94       	clt

00000a0e <__fp_szero>:
 a0e:	bb 27       	eor	r27, r27
 a10:	66 27       	eor	r22, r22
 a12:	77 27       	eor	r23, r23
 a14:	cb 01       	movw	r24, r22
 a16:	97 f9       	bld	r25, 7
 a18:	08 95       	ret

00000a1a <__gesf2>:
 a1a:	0e 94 32 04 	call	0x864	; 0x864 <__fp_cmp>
 a1e:	08 f4       	brcc	.+2      	; 0xa22 <__gesf2+0x8>
 a20:	8f ef       	ldi	r24, 0xFF	; 255
 a22:	08 95       	ret

00000a24 <inverse>:
 a24:	9b 01       	movw	r18, r22
 a26:	ac 01       	movw	r20, r24
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	70 e0       	ldi	r23, 0x00	; 0
 a2c:	80 e8       	ldi	r24, 0x80	; 128
 a2e:	9f e3       	ldi	r25, 0x3F	; 63
 a30:	0c 94 91 03 	jmp	0x722	; 0x722 <__divsf3>

00000a34 <__mulsf3>:
 a34:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__mulsf3x>
 a38:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_round>
 a3c:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_pscA>
 a40:	38 f0       	brcs	.+14     	; 0xa50 <__mulsf3+0x1c>
 a42:	0e 94 8d 04 	call	0x91a	; 0x91a <__fp_pscB>
 a46:	20 f0       	brcs	.+8      	; 0xa50 <__mulsf3+0x1c>
 a48:	95 23       	and	r25, r21
 a4a:	11 f0       	breq	.+4      	; 0xa50 <__mulsf3+0x1c>
 a4c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_inf>
 a50:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_nan>
 a54:	11 24       	eor	r1, r1
 a56:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_szero>

00000a5a <__mulsf3x>:
 a5a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_split3>
 a5e:	70 f3       	brcs	.-36     	; 0xa3c <__mulsf3+0x8>

00000a60 <__mulsf3_pse>:
 a60:	95 9f       	mul	r25, r21
 a62:	c1 f3       	breq	.-16     	; 0xa54 <__mulsf3+0x20>
 a64:	95 0f       	add	r25, r21
 a66:	50 e0       	ldi	r21, 0x00	; 0
 a68:	55 1f       	adc	r21, r21
 a6a:	62 9f       	mul	r22, r18
 a6c:	f0 01       	movw	r30, r0
 a6e:	72 9f       	mul	r23, r18
 a70:	bb 27       	eor	r27, r27
 a72:	f0 0d       	add	r31, r0
 a74:	b1 1d       	adc	r27, r1
 a76:	63 9f       	mul	r22, r19
 a78:	aa 27       	eor	r26, r26
 a7a:	f0 0d       	add	r31, r0
 a7c:	b1 1d       	adc	r27, r1
 a7e:	aa 1f       	adc	r26, r26
 a80:	64 9f       	mul	r22, r20
 a82:	66 27       	eor	r22, r22
 a84:	b0 0d       	add	r27, r0
 a86:	a1 1d       	adc	r26, r1
 a88:	66 1f       	adc	r22, r22
 a8a:	82 9f       	mul	r24, r18
 a8c:	22 27       	eor	r18, r18
 a8e:	b0 0d       	add	r27, r0
 a90:	a1 1d       	adc	r26, r1
 a92:	62 1f       	adc	r22, r18
 a94:	73 9f       	mul	r23, r19
 a96:	b0 0d       	add	r27, r0
 a98:	a1 1d       	adc	r26, r1
 a9a:	62 1f       	adc	r22, r18
 a9c:	83 9f       	mul	r24, r19
 a9e:	a0 0d       	add	r26, r0
 aa0:	61 1d       	adc	r22, r1
 aa2:	22 1f       	adc	r18, r18
 aa4:	74 9f       	mul	r23, r20
 aa6:	33 27       	eor	r19, r19
 aa8:	a0 0d       	add	r26, r0
 aaa:	61 1d       	adc	r22, r1
 aac:	23 1f       	adc	r18, r19
 aae:	84 9f       	mul	r24, r20
 ab0:	60 0d       	add	r22, r0
 ab2:	21 1d       	adc	r18, r1
 ab4:	82 2f       	mov	r24, r18
 ab6:	76 2f       	mov	r23, r22
 ab8:	6a 2f       	mov	r22, r26
 aba:	11 24       	eor	r1, r1
 abc:	9f 57       	subi	r25, 0x7F	; 127
 abe:	50 40       	sbci	r21, 0x00	; 0
 ac0:	9a f0       	brmi	.+38     	; 0xae8 <__mulsf3_pse+0x88>
 ac2:	f1 f0       	breq	.+60     	; 0xb00 <__mulsf3_pse+0xa0>
 ac4:	88 23       	and	r24, r24
 ac6:	4a f0       	brmi	.+18     	; 0xada <__mulsf3_pse+0x7a>
 ac8:	ee 0f       	add	r30, r30
 aca:	ff 1f       	adc	r31, r31
 acc:	bb 1f       	adc	r27, r27
 ace:	66 1f       	adc	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	91 50       	subi	r25, 0x01	; 1
 ad6:	50 40       	sbci	r21, 0x00	; 0
 ad8:	a9 f7       	brne	.-22     	; 0xac4 <__mulsf3_pse+0x64>
 ada:	9e 3f       	cpi	r25, 0xFE	; 254
 adc:	51 05       	cpc	r21, r1
 ade:	80 f0       	brcs	.+32     	; 0xb00 <__mulsf3_pse+0xa0>
 ae0:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_inf>
 ae4:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_szero>
 ae8:	5f 3f       	cpi	r21, 0xFF	; 255
 aea:	e4 f3       	brlt	.-8      	; 0xae4 <__mulsf3_pse+0x84>
 aec:	98 3e       	cpi	r25, 0xE8	; 232
 aee:	d4 f3       	brlt	.-12     	; 0xae4 <__mulsf3_pse+0x84>
 af0:	86 95       	lsr	r24
 af2:	77 95       	ror	r23
 af4:	67 95       	ror	r22
 af6:	b7 95       	ror	r27
 af8:	f7 95       	ror	r31
 afa:	e7 95       	ror	r30
 afc:	9f 5f       	subi	r25, 0xFF	; 255
 afe:	c1 f7       	brne	.-16     	; 0xaf0 <__mulsf3_pse+0x90>
 b00:	fe 2b       	or	r31, r30
 b02:	88 0f       	add	r24, r24
 b04:	91 1d       	adc	r25, r1
 b06:	96 95       	lsr	r25
 b08:	87 95       	ror	r24
 b0a:	97 f9       	bld	r25, 7
 b0c:	08 95       	ret

00000b0e <round>:
 b0e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_splitA>
 b12:	e8 f0       	brcs	.+58     	; 0xb4e <round+0x40>
 b14:	9e 37       	cpi	r25, 0x7E	; 126
 b16:	e8 f0       	brcs	.+58     	; 0xb52 <round+0x44>
 b18:	96 39       	cpi	r25, 0x96	; 150
 b1a:	b8 f4       	brcc	.+46     	; 0xb4a <round+0x3c>
 b1c:	9e 38       	cpi	r25, 0x8E	; 142
 b1e:	48 f4       	brcc	.+18     	; 0xb32 <round+0x24>
 b20:	67 2f       	mov	r22, r23
 b22:	78 2f       	mov	r23, r24
 b24:	88 27       	eor	r24, r24
 b26:	98 5f       	subi	r25, 0xF8	; 248
 b28:	f9 cf       	rjmp	.-14     	; 0xb1c <round+0xe>
 b2a:	86 95       	lsr	r24
 b2c:	77 95       	ror	r23
 b2e:	67 95       	ror	r22
 b30:	93 95       	inc	r25
 b32:	95 39       	cpi	r25, 0x95	; 149
 b34:	d0 f3       	brcs	.-12     	; 0xb2a <round+0x1c>
 b36:	b6 2f       	mov	r27, r22
 b38:	b1 70       	andi	r27, 0x01	; 1
 b3a:	6b 0f       	add	r22, r27
 b3c:	71 1d       	adc	r23, r1
 b3e:	81 1d       	adc	r24, r1
 b40:	20 f4       	brcc	.+8      	; 0xb4a <round+0x3c>
 b42:	87 95       	ror	r24
 b44:	77 95       	ror	r23
 b46:	67 95       	ror	r22
 b48:	93 95       	inc	r25
 b4a:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_mintl>
 b4e:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_mpack>
 b52:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_szero>

00000b56 <sin>:
 b56:	9f 93       	push	r25
 b58:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_rempio2>
 b5c:	0f 90       	pop	r0
 b5e:	07 fc       	sbrc	r0, 7
 b60:	ee 5f       	subi	r30, 0xFE	; 254
 b62:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__fp_sinus>
 b66:	19 f4       	brne	.+6      	; 0xb6e <sin+0x18>
 b68:	16 f4       	brtc	.+4      	; 0xb6e <sin+0x18>
 b6a:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_nan>
 b6e:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_mpack>

00000b72 <sqrt>:
 b72:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_splitA>
 b76:	b8 f3       	brcs	.-18     	; 0xb66 <sin+0x10>
 b78:	99 23       	and	r25, r25
 b7a:	c9 f3       	breq	.-14     	; 0xb6e <sin+0x18>
 b7c:	b6 f3       	brts	.-20     	; 0xb6a <sin+0x14>
 b7e:	9f 57       	subi	r25, 0x7F	; 127
 b80:	55 0b       	sbc	r21, r21
 b82:	87 ff       	sbrs	r24, 7
 b84:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_norm2>
 b88:	00 24       	eor	r0, r0
 b8a:	a0 e6       	ldi	r26, 0x60	; 96
 b8c:	40 ea       	ldi	r20, 0xA0	; 160
 b8e:	90 01       	movw	r18, r0
 b90:	80 58       	subi	r24, 0x80	; 128
 b92:	56 95       	lsr	r21
 b94:	97 95       	ror	r25
 b96:	28 f4       	brcc	.+10     	; 0xba2 <sqrt+0x30>
 b98:	80 5c       	subi	r24, 0xC0	; 192
 b9a:	66 0f       	add	r22, r22
 b9c:	77 1f       	adc	r23, r23
 b9e:	88 1f       	adc	r24, r24
 ba0:	20 f0       	brcs	.+8      	; 0xbaa <sqrt+0x38>
 ba2:	26 17       	cp	r18, r22
 ba4:	37 07       	cpc	r19, r23
 ba6:	48 07       	cpc	r20, r24
 ba8:	30 f4       	brcc	.+12     	; 0xbb6 <sqrt+0x44>
 baa:	62 1b       	sub	r22, r18
 bac:	73 0b       	sbc	r23, r19
 bae:	84 0b       	sbc	r24, r20
 bb0:	20 29       	or	r18, r0
 bb2:	31 29       	or	r19, r1
 bb4:	4a 2b       	or	r20, r26
 bb6:	a6 95       	lsr	r26
 bb8:	17 94       	ror	r1
 bba:	07 94       	ror	r0
 bbc:	20 25       	eor	r18, r0
 bbe:	31 25       	eor	r19, r1
 bc0:	4a 27       	eor	r20, r26
 bc2:	58 f7       	brcc	.-42     	; 0xb9a <sqrt+0x28>
 bc4:	66 0f       	add	r22, r22
 bc6:	77 1f       	adc	r23, r23
 bc8:	88 1f       	adc	r24, r24
 bca:	20 f0       	brcs	.+8      	; 0xbd4 <sqrt+0x62>
 bcc:	26 17       	cp	r18, r22
 bce:	37 07       	cpc	r19, r23
 bd0:	48 07       	cpc	r20, r24
 bd2:	30 f4       	brcc	.+12     	; 0xbe0 <sqrt+0x6e>
 bd4:	62 0b       	sbc	r22, r18
 bd6:	73 0b       	sbc	r23, r19
 bd8:	84 0b       	sbc	r24, r20
 bda:	20 0d       	add	r18, r0
 bdc:	31 1d       	adc	r19, r1
 bde:	41 1d       	adc	r20, r1
 be0:	a0 95       	com	r26
 be2:	81 f7       	brne	.-32     	; 0xbc4 <sqrt+0x52>
 be4:	b9 01       	movw	r22, r18
 be6:	84 2f       	mov	r24, r20
 be8:	91 58       	subi	r25, 0x81	; 129
 bea:	88 0f       	add	r24, r24
 bec:	96 95       	lsr	r25
 bee:	87 95       	ror	r24
 bf0:	08 95       	ret

00000bf2 <square>:
 bf2:	9b 01       	movw	r18, r22
 bf4:	ac 01       	movw	r20, r24
 bf6:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__mulsf3>

00000bfa <__fp_mintl>:
 bfa:	88 23       	and	r24, r24
 bfc:	71 f4       	brne	.+28     	; 0xc1a <__fp_mintl+0x20>
 bfe:	77 23       	and	r23, r23
 c00:	21 f0       	breq	.+8      	; 0xc0a <__fp_mintl+0x10>
 c02:	98 50       	subi	r25, 0x08	; 8
 c04:	87 2b       	or	r24, r23
 c06:	76 2f       	mov	r23, r22
 c08:	07 c0       	rjmp	.+14     	; 0xc18 <__fp_mintl+0x1e>
 c0a:	66 23       	and	r22, r22
 c0c:	11 f4       	brne	.+4      	; 0xc12 <__fp_mintl+0x18>
 c0e:	99 27       	eor	r25, r25
 c10:	0d c0       	rjmp	.+26     	; 0xc2c <__fp_mintl+0x32>
 c12:	90 51       	subi	r25, 0x10	; 16
 c14:	86 2b       	or	r24, r22
 c16:	70 e0       	ldi	r23, 0x00	; 0
 c18:	60 e0       	ldi	r22, 0x00	; 0
 c1a:	2a f0       	brmi	.+10     	; 0xc26 <__fp_mintl+0x2c>
 c1c:	9a 95       	dec	r25
 c1e:	66 0f       	add	r22, r22
 c20:	77 1f       	adc	r23, r23
 c22:	88 1f       	adc	r24, r24
 c24:	da f7       	brpl	.-10     	; 0xc1c <__fp_mintl+0x22>
 c26:	88 0f       	add	r24, r24
 c28:	96 95       	lsr	r25
 c2a:	87 95       	ror	r24
 c2c:	97 f9       	bld	r25, 7
 c2e:	08 95       	ret

00000c30 <__fp_mpack>:
 c30:	9f 3f       	cpi	r25, 0xFF	; 255
 c32:	31 f0       	breq	.+12     	; 0xc40 <__fp_mpack_finite+0xc>

00000c34 <__fp_mpack_finite>:
 c34:	91 50       	subi	r25, 0x01	; 1
 c36:	20 f4       	brcc	.+8      	; 0xc40 <__fp_mpack_finite+0xc>
 c38:	87 95       	ror	r24
 c3a:	77 95       	ror	r23
 c3c:	67 95       	ror	r22
 c3e:	b7 95       	ror	r27
 c40:	88 0f       	add	r24, r24
 c42:	91 1d       	adc	r25, r1
 c44:	96 95       	lsr	r25
 c46:	87 95       	ror	r24
 c48:	97 f9       	bld	r25, 7
 c4a:	08 95       	ret

00000c4c <__fp_norm2>:
 c4c:	91 50       	subi	r25, 0x01	; 1
 c4e:	50 40       	sbci	r21, 0x00	; 0
 c50:	66 0f       	add	r22, r22
 c52:	77 1f       	adc	r23, r23
 c54:	88 1f       	adc	r24, r24
 c56:	d2 f7       	brpl	.-12     	; 0xc4c <__fp_norm2>
 c58:	08 95       	ret

00000c5a <__fp_powsodd>:
 c5a:	9f 93       	push	r25
 c5c:	8f 93       	push	r24
 c5e:	7f 93       	push	r23
 c60:	6f 93       	push	r22
 c62:	ff 93       	push	r31
 c64:	ef 93       	push	r30
 c66:	9b 01       	movw	r18, r22
 c68:	ac 01       	movw	r20, r24
 c6a:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 c6e:	ef 91       	pop	r30
 c70:	ff 91       	pop	r31
 c72:	0e 94 5f 04 	call	0x8be	; 0x8be <__fp_powser>
 c76:	2f 91       	pop	r18
 c78:	3f 91       	pop	r19
 c7a:	4f 91       	pop	r20
 c7c:	5f 91       	pop	r21
 c7e:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__mulsf3>

00000c82 <_exit>:
 c82:	f8 94       	cli

00000c84 <__stop_program>:
 c84:	ff cf       	rjmp	.-2      	; 0xc84 <__stop_program>
