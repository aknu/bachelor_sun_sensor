
SunSensor_AVRDB_v0.5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00001032  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fbe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00804000  00804000  00001032  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001032  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041fb  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031af  00000000  00000000  00005367  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000996  00000000  00000000  00008516  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00008eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001eef  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000386  00000000  00000000  0000afa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000b329  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  48:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_18>
  4c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  58:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  5c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  60:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  64:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  68:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  6c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  70:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  74:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  78:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  7c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  80:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  84:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  88:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  8c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  90:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  94:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  98:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  9c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  a0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  a4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  a8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  ac:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  b0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  b4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  b8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  bc:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  c0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  c4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  c8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  cc:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  d0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  d4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  d8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  dc:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  e0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  e4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  e8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  ec:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  f0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  f4:	08 4a       	sbci	r16, 0xA8	; 168
  f6:	d7 3b       	cpi	r29, 0xB7	; 183
  f8:	3b ce       	rjmp	.-906    	; 0xfffffd70 <__eeprom_end+0xff7efd70>
  fa:	01 6e       	ori	r16, 0xE1	; 225
  fc:	84 bc       	out	0x24, r8	; 36
  fe:	bf fd       	.word	0xfdbf	; ????
 100:	c1 2f       	mov	r28, r17
 102:	3d 6c       	ori	r19, 0xCD	; 205
 104:	74 31       	cpi	r23, 0x14	; 20
 106:	9a bd       	out	0x2a, r25	; 42
 108:	56 83       	std	Z+6, r21	; 0x06
 10a:	3d da       	rcall	.-2950   	; 0xfffff586 <__eeprom_end+0xff7ef586>
 10c:	3d 00       	.word	0x003d	; ????
 10e:	c7 7f       	andi	r28, 0xF7	; 247
 110:	11 be       	out	0x31, r1	; 49
 112:	d9 e4       	ldi	r29, 0x49	; 73
 114:	bb 4c       	sbci	r27, 0xCB	; 203
 116:	3e 91       	ld	r19, -X
 118:	6b aa       	std	Y+51, r6	; 0x33
 11a:	aa be       	out	0x3a, r10	; 58
 11c:	00 00       	nop
 11e:	00 80       	ld	r0, Z
 120:	3f 05       	cpc	r19, r15
 122:	a8 4c       	sbci	r26, 0xC8	; 200
 124:	cd b2       	in	r12, 0x1d	; 29
 126:	d4 4e       	sbci	r29, 0xE4	; 228
 128:	b9 38       	cpi	r27, 0x89	; 137
 12a:	36 a9       	ldd	r19, Z+54	; 0x36
 12c:	02 0c       	add	r0, r2
 12e:	50 b9       	out	0x00, r21	; 0
 130:	91 86       	std	Z+9, r9	; 0x09
 132:	88 08       	sbc	r8, r8
 134:	3c a6       	std	Y+44, r3	; 0x2c
 136:	aa aa       	std	Y+50, r10	; 0x32
 138:	2a be       	out	0x3a, r2	; 58
 13a:	00 00       	nop
 13c:	00 80       	ld	r0, Z
 13e:	3f 00       	.word	0x003f	; ????

00000140 <__ctors_end>:
 140:	11 24       	eor	r1, r1
 142:	1f be       	out	0x3f, r1	; 63
 144:	cf ef       	ldi	r28, 0xFF	; 255
 146:	cd bf       	out	0x3d, r28	; 61
 148:	df e7       	ldi	r29, 0x7F	; 127
 14a:	de bf       	out	0x3e, r29	; 62

0000014c <__do_clear_bss>:
 14c:	20 e4       	ldi	r18, 0x40	; 64
 14e:	a0 e0       	ldi	r26, 0x00	; 0
 150:	b0 e4       	ldi	r27, 0x40	; 64
 152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
 154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
 156:	a6 34       	cpi	r26, 0x46	; 70
 158:	b2 07       	cpc	r27, r18
 15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
 15c:	0e 94 b4 00 	call	0x168	; 0x168 <main>
 160:	0c 94 dd 07 	jmp	0xfba	; 0xfba <_exit>

00000164 <__bad_interrupt>:
 164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <main>:
#include "include/I2C_slave.h"
#include "include/sun_sensor.h"

int main(void)
{	
	PORTD.DIRCLR = 0xFF;
 168:	e0 e6       	ldi	r30, 0x60	; 96
 16a:	f4 e0       	ldi	r31, 0x04	; 4
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 170:	80 89       	ldd	r24, Z+16	; 0x10
 172:	84 60       	ori	r24, 0x04	; 4
 174:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN0CTRL &= ~PORT_PULLUPEN_bm;
 176:	80 89       	ldd	r24, Z+16	; 0x10
 178:	87 7f       	andi	r24, 0xF7	; 247
 17a:	80 8b       	std	Z+16, r24	; 0x10
	slaveAddress = 0x08;
 17c:	88 e0       	ldi	r24, 0x08	; 8
 17e:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <slaveAddress>
	
	h = 2.18e-3;
 182:	85 e5       	ldi	r24, 0x55	; 85
 184:	9e ed       	ldi	r25, 0xDE	; 222
 186:	ae e0       	ldi	r26, 0x0E	; 14
 188:	bb e3       	ldi	r27, 0x3B	; 59
 18a:	80 93 41 40 	sts	0x4041, r24	; 0x804041 <h>
 18e:	90 93 42 40 	sts	0x4042, r25	; 0x804042 <h+0x1>
 192:	a0 93 43 40 	sts	0x4043, r26	; 0x804043 <h+0x2>
 196:	b0 93 44 40 	sts	0x4044, r27	; 0x804044 <h+0x3>
	r = 1.26e-3;
 19a:	86 e9       	ldi	r24, 0x96	; 150
 19c:	96 e2       	ldi	r25, 0x26	; 38
 19e:	a5 ea       	ldi	r26, 0xA5	; 165
 1a0:	ba e3       	ldi	r27, 0x3A	; 58
 1a2:	80 93 21 40 	sts	0x4021, r24	; 0x804021 <r>
 1a6:	90 93 22 40 	sts	0x4022, r25	; 0x804022 <r+0x1>
 1aa:	a0 93 23 40 	sts	0x4023, r26	; 0x804023 <r+0x2>
 1ae:	b0 93 24 40 	sts	0x4024, r27	; 0x804024 <r+0x3>
	
	I2C_init(slaveAddress);
 1b2:	88 e0       	ldi	r24, 0x08	; 8
 1b4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_init>
	ADC_init();
 1b8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <ADC_init>
	sei();
 1bc:	78 94       	sei
 1be:	ff cf       	rjmp	.-2      	; 0x1be <main+0x56>

000001c0 <ADC_init>:
	- Interrupt based ADC
*/

void ADC_init(void)
	{
		VREF.ADC0REF |= VREF_REFSEL_2V048_gc;	//Set VREF
 1c0:	e0 eb       	ldi	r30, 0xB0	; 176
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	81 60       	ori	r24, 0x01	; 1
 1c8:	80 83       	st	Z, r24
		ADC0.CTRLA |= ADC_RESSEL_12BIT_gc;
 1ca:	e0 e0       	ldi	r30, 0x00	; 0
 1cc:	f6 e0       	ldi	r31, 0x06	; 6
 1ce:	80 81       	ld	r24, Z
 1d0:	80 83       	st	Z, r24
		//ADC0.CTRLB |= ADC_SAMPNUM_ACC8_gc;
		ADC0.CTRLC |= ADC_PRESC_DIV20_gc;		//Select pre-scaler to 20 (CLK_ADC = 4Mhz/20 = 200kHz)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	85 60       	ori	r24, 0x05	; 5
 1d6:	82 83       	std	Z+2, r24	; 0x02
		
		ADC0.CTRLA |= ADC_ENABLE_bm;				//Enable ADC
 1d8:	80 81       	ld	r24, Z
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <ADC_read>:
	}
	
uint16_t ADC_read(diode_t diode)
	{
		ADC0.MUXPOS = diode;										//Set ADC input
 1e0:	e0 e0       	ldi	r30, 0x00	; 0
 1e2:	f6 e0       	ldi	r31, 0x06	; 6
 1e4:	80 87       	std	Z+8, r24	; 0x08
		ADC0.COMMAND = ADC_STCONV_bm;								//Start conversion
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	82 87       	std	Z+10, r24	; 0x0a
		loop_until_bit_is_set(ADC0.INTFLAGS,ADC_RESRDY_bp);		//Wait until conversion finished
 1ea:	ed e0       	ldi	r30, 0x0D	; 13
 1ec:	f6 e0       	ldi	r31, 0x06	; 6
 1ee:	80 81       	ld	r24, Z
 1f0:	80 ff       	sbrs	r24, 0
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <ADC_read+0xe>
		return ADC0.RES;
 1f4:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 1f8:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
	}
 1fc:	08 95       	ret

000001fe <I2C_init>:
	}
}

void I2C_init(uint8_t slaveAddress)
{
	TWI0.SCTRLA = TWI_DIEN_bm | TWI_APIEN_bm | TWI_ENABLE_bm | TWI_SMEN_bm;	//Enable I2C and data and address interrupts
 1fe:	e0 e0       	ldi	r30, 0x00	; 0
 200:	f9 e0       	ldi	r31, 0x09	; 9
 202:	93 ec       	ldi	r25, 0xC3	; 195
 204:	91 87       	std	Z+9, r25	; 0x09
	TWI0.SADDR = slaveAddress << 1;								//Set slave address
 206:	88 0f       	add	r24, r24
 208:	84 87       	std	Z+12, r24	; 0x0c
	I2C_isFirstByte = true;										//Set counters for transmitting data
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 04 40 	sts	0x4004, r24	; 0x804004 <I2C_isFirstByte>
	I2C_byte_counter = 0;
 210:	10 92 40 40 	sts	0x4040, r1	; 0x804040 <I2C_byte_counter>
 214:	08 95       	ret

00000216 <I2C_setUpData>:
}
	
void I2C_setUpData(uint8_t data[], uint8_t data_size)
{
	I2C_data_size = data_size;				
 216:	60 93 29 40 	sts	0x4029, r22	; 0x804029 <I2C_data_size>
	for(uint8_t i = 0; i < data_size; i++)	//Set up data to be transmitted
 21a:	66 23       	and	r22, r22
 21c:	71 f0       	breq	.+28     	; 0x23a <I2C_setUpData+0x24>
 21e:	fc 01       	movw	r30, r24
 220:	ae e0       	ldi	r26, 0x0E	; 14
 222:	b0 e4       	ldi	r27, 0x40	; 64
 224:	61 50       	subi	r22, 0x01	; 1
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	6f 5f       	subi	r22, 0xFF	; 255
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	86 0f       	add	r24, r22
 22e:	97 1f       	adc	r25, r23
	{
		I2C_data[i] = data[i];
 230:	21 91       	ld	r18, Z+
 232:	2d 93       	st	X+, r18
}
	
void I2C_setUpData(uint8_t data[], uint8_t data_size)
{
	I2C_data_size = data_size;				
	for(uint8_t i = 0; i < data_size; i++)	//Set up data to be transmitted
 234:	e8 17       	cp	r30, r24
 236:	f9 07       	cpc	r31, r25
 238:	d9 f7       	brne	.-10     	; 0x230 <I2C_setUpData+0x1a>
 23a:	08 95       	ret

0000023c <I2C_sendData>:
	}
}
	
void I2C_sendData(void)
{
	if(I2C_isFirstByte)						//if first byte of transmission
 23c:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <I2C_isFirstByte>
 240:	88 23       	and	r24, r24
 242:	c9 f0       	breq	.+50     	; 0x276 <I2C_sendData+0x3a>
	{
		I2C_isFirstByte = false;
 244:	10 92 04 40 	sts	0x4004, r1	; 0x804004 <I2C_isFirstByte>
		TWI0.SDATA = I2C_data[I2C_byte_counter%I2C_data_size];	//Load data for master to read
 248:	20 91 40 40 	lds	r18, 0x4040	; 0x804040 <I2C_byte_counter>
 24c:	60 91 29 40 	lds	r22, 0x4029	; 0x804029 <I2C_data_size>
 250:	82 2f       	mov	r24, r18
 252:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__udivmodqi4>
 256:	e9 2f       	mov	r30, r25
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	e2 5f       	subi	r30, 0xF2	; 242
 25c:	ff 4b       	sbci	r31, 0xBF	; 191
 25e:	80 81       	ld	r24, Z
 260:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <__TEXT_REGION_LENGTH__+0x7e090d>
		I2C_byte_counter++;										//Increment counter
 264:	2f 5f       	subi	r18, 0xFF	; 255
 266:	20 93 40 40 	sts	0x4040, r18	; 0x804040 <I2C_byte_counter>
		loop_until_bit_is_set(TWI0_SSTATUS,TWI_DIF_bp);			//Wait until data has been transmitted. This will trigger new interrupt
 26a:	eb e0       	ldi	r30, 0x0B	; 11
 26c:	f9 e0       	ldi	r31, 0x09	; 9
 26e:	80 81       	ld	r24, Z
 270:	88 23       	and	r24, r24
 272:	ec f7       	brge	.-6      	; 0x26e <I2C_sendData+0x32>
 274:	08 95       	ret
	}
	else if(!(TWI0.SSTATUS & TWI_RXACK_bm)) //if RXACK == 0 (received ACK)
 276:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <__TEXT_REGION_LENGTH__+0x7e090b>
 27a:	84 fd       	sbrc	r24, 4
 27c:	17 c0       	rjmp	.+46     	; 0x2ac <I2C_sendData+0x70>
	{
		TWI0.SDATA = I2C_data[I2C_byte_counter%I2C_data_size];	//Load data for master to read
 27e:	20 91 40 40 	lds	r18, 0x4040	; 0x804040 <I2C_byte_counter>
 282:	60 91 29 40 	lds	r22, 0x4029	; 0x804029 <I2C_data_size>
 286:	82 2f       	mov	r24, r18
 288:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__udivmodqi4>
 28c:	e9 2f       	mov	r30, r25
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	e2 5f       	subi	r30, 0xF2	; 242
 292:	ff 4b       	sbci	r31, 0xBF	; 191
 294:	80 81       	ld	r24, Z
 296:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <__TEXT_REGION_LENGTH__+0x7e090d>
		I2C_byte_counter++;										//Increment counter
 29a:	2f 5f       	subi	r18, 0xFF	; 255
 29c:	20 93 40 40 	sts	0x4040, r18	; 0x804040 <I2C_byte_counter>
		loop_until_bit_is_set(TWI0_SSTATUS,TWI_DIF_bp);			//Wait until data has been transmitted. This will trigger new interrupt
 2a0:	eb e0       	ldi	r30, 0x0B	; 11
 2a2:	f9 e0       	ldi	r31, 0x09	; 9
 2a4:	80 81       	ld	r24, Z
 2a6:	88 23       	and	r24, r24
 2a8:	ec f7       	brge	.-6      	; 0x2a4 <I2C_sendData+0x68>
 2aa:	08 95       	ret
	}
	else                                    //if RXACK == 1 (received NACK)
	{
		TWI0.SDATA = 0;			//(not sure why this line is needed? programs hangs here without this line...)
 2ac:	10 92 0d 09 	sts	0x090D, r1	; 0x80090d <__TEXT_REGION_LENGTH__+0x7e090d>
		I2C_isFirstByte = 1;	//Reset counters
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 04 40 	sts	0x4004, r24	; 0x804004 <I2C_isFirstByte>
		I2C_byte_counter = 0;
 2b6:	10 92 40 40 	sts	0x4040, r1	; 0x804040 <I2C_byte_counter>
 2ba:	08 95       	ret

000002bc <I2C_sendAck>:
	}
}
	
void I2C_sendAck(void)
{
	TWI0.SCTRLB = TWI_ACKACT_ACK_gc;
 2bc:	e0 e0       	ldi	r30, 0x00	; 0
 2be:	f9 e0       	ldi	r31, 0x09	; 9
 2c0:	12 86       	std	Z+10, r1	; 0x0a
	TWI0.SCTRLB |= TWI_SCMD_RESPONSE_gc;
 2c2:	82 85       	ldd	r24, Z+10	; 0x0a
 2c4:	83 60       	ori	r24, 0x03	; 3
 2c6:	82 87       	std	Z+10, r24	; 0x0a
 2c8:	08 95       	ret

000002ca <I2C_sendNack>:
}
	
void I2C_sendNack(void)
{
	TWI0.SCTRLB = TWI_ACKACT_NACK_gc;
 2ca:	e0 e0       	ldi	r30, 0x00	; 0
 2cc:	f9 e0       	ldi	r31, 0x09	; 9
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	82 87       	std	Z+10, r24	; 0x0a
	TWI0.SCTRLB |= TWI_SCMD_RESPONSE_gc;
 2d2:	82 85       	ldd	r24, Z+10	; 0x0a
 2d4:	83 60       	ori	r24, 0x03	; 3
 2d6:	82 87       	std	Z+10, r24	; 0x0a
 2d8:	08 95       	ret

000002da <__vector_18>:
	- Create function to set new I2C address
	- Move getVector function out from ISR
*/
	
ISR(TWI0_TWIS_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	0f 92       	push	r0
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	if((TWI0.SSTATUS & TWI_APIF_bm) && (TWI0.SSTATUS & TWI_AP_bm))		//Address interrupt
 300:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <__TEXT_REGION_LENGTH__+0x7e090b>
 304:	86 ff       	sbrs	r24, 6
 306:	07 c0       	rjmp	.+14     	; 0x316 <__vector_18+0x3c>
 308:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <__TEXT_REGION_LENGTH__+0x7e090b>
 30c:	80 ff       	sbrs	r24, 0
 30e:	03 c0       	rjmp	.+6      	; 0x316 <__vector_18+0x3c>
	{
		I2C_sendAck();													//Send ACK after address received
 310:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_sendAck>
 314:	3b c0       	rjmp	.+118    	; 0x38c <__vector_18+0xb2>
	}
	else if(TWI0.SSTATUS & TWI_DIF_bm)									//Data interrupt
 316:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <__TEXT_REGION_LENGTH__+0x7e090b>
 31a:	88 23       	and	r24, r24
 31c:	bc f5       	brge	.+110    	; 0x38c <__vector_18+0xb2>
	{
		if(TWI0.SSTATUS & TWI_DIR_bm)									//Master read from slave
 31e:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <__TEXT_REGION_LENGTH__+0x7e090b>
 322:	81 ff       	sbrs	r24, 1
 324:	03 c0       	rjmp	.+6      	; 0x32c <__vector_18+0x52>
		{
			I2C_sendData();
 326:	0e 94 1e 01 	call	0x23c	; 0x23c <I2C_sendData>
 32a:	30 c0       	rjmp	.+96     	; 0x38c <__vector_18+0xb2>
		}
		else{															//Master write to slave
			cmd = TWI0.SDATA;
 32c:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <__TEXT_REGION_LENGTH__+0x7e090d>
 330:	80 93 45 40 	sts	0x4045, r24	; 0x804045 <cmd>
			I2C_sendNack();												//Send NACK after data received
 334:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_sendNack>
			// TODO: Move switch case out from ISR
			switch(cmd)
 338:	80 91 45 40 	lds	r24, 0x4045	; 0x804045 <cmd>
 33c:	84 30       	cpi	r24, 0x04	; 4
 33e:	49 f0       	breq	.+18     	; 0x352 <__vector_18+0x78>
 340:	18 f4       	brcc	.+6      	; 0x348 <__vector_18+0x6e>
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	31 f0       	breq	.+12     	; 0x352 <__vector_18+0x78>
 346:	22 c0       	rjmp	.+68     	; 0x38c <__vector_18+0xb2>
 348:	85 30       	cpi	r24, 0x05	; 5
 34a:	69 f0       	breq	.+26     	; 0x366 <__vector_18+0x8c>
 34c:	86 30       	cpi	r24, 0x06	; 6
 34e:	a9 f0       	breq	.+42     	; 0x37a <__vector_18+0xa0>
 350:	1d c0       	rjmp	.+58     	; 0x38c <__vector_18+0xb2>
			{
				case 0x02:
					//Make function to set new I2C address
				case 0x04: //Master requests angles phi and theta
					getAngles();
 352:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <getAngles>
					setUpAngles();
 356:	0e 94 59 03 	call	0x6b2	; 0x6b2 <setUpAngles>
					I2C_setUpData(angles,4);
 35a:	64 e0       	ldi	r22, 0x04	; 4
 35c:	84 e1       	ldi	r24, 0x14	; 20
 35e:	90 e4       	ldi	r25, 0x40	; 64
 360:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_setUpData>
					break;
 364:	13 c0       	rjmp	.+38     	; 0x38c <__vector_18+0xb2>
				case 0x05: //Master requests vector R[xMSB, xLSB, yMSB, yLSB, zMSB, zLSB]
					getAngles();
 366:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <getAngles>
					setUpVector();
 36a:	0e 94 a0 03 	call	0x740	; 0x740 <setUpVector>
					I2C_setUpData(R_vect, 6);
 36e:	66 e0       	ldi	r22, 0x06	; 6
 370:	8a e3       	ldi	r24, 0x3A	; 58
 372:	90 e4       	ldi	r25, 0x40	; 64
 374:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_setUpData>
					break;
 378:	09 c0       	rjmp	.+18     	; 0x38c <__vector_18+0xb2>
				case 0x06:
					getAngles();
 37a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <getAngles>
					setUpADCvalues();
 37e:	0e 94 23 04 	call	0x846	; 0x846 <setUpADCvalues>
					I2C_setUpData(ADC_values, 8);
 382:	68 e0       	ldi	r22, 0x08	; 8
 384:	8e e2       	ldi	r24, 0x2E	; 46
 386:	90 e4       	ldi	r25, 0x40	; 64
 388:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_setUpData>
					break;
			}
		}
	}
}
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	3f 91       	pop	r19
 3a2:	2f 91       	pop	r18
 3a4:	0f 90       	pop	r0
 3a6:	0b be       	out	0x3b, r0	; 59
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <getAngles>:
#include "../include/ADC.h"
#include <avr/io.h>
#include <math.h>


void getAngles(void){
 3b2:	4f 92       	push	r4
 3b4:	5f 92       	push	r5
 3b6:	6f 92       	push	r6
 3b8:	7f 92       	push	r7
 3ba:	8f 92       	push	r8
 3bc:	9f 92       	push	r9
 3be:	af 92       	push	r10
 3c0:	bf 92       	push	r11
 3c2:	cf 92       	push	r12
 3c4:	df 92       	push	r13
 3c6:	ef 92       	push	r14
 3c8:	ff 92       	push	r15
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
 3d2:	60 97       	sbiw	r28, 0x10	; 16
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	de bf       	out	0x3e, r29	; 62
	
	A = ADC_read(DIODE_A);
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ADC_read>
 3de:	a0 e0       	ldi	r26, 0x00	; 0
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <A>
 3e6:	90 93 0b 40 	sts	0x400B, r25	; 0x80400b <A+0x1>
 3ea:	a0 93 0c 40 	sts	0x400C, r26	; 0x80400c <A+0x2>
 3ee:	b0 93 0d 40 	sts	0x400D, r27	; 0x80400d <A+0x3>
	B = ADC_read(DIODE_B);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ADC_read>
 3f8:	a0 e0       	ldi	r26, 0x00	; 0
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	80 93 1d 40 	sts	0x401D, r24	; 0x80401d <B>
 400:	90 93 1e 40 	sts	0x401E, r25	; 0x80401e <B+0x1>
 404:	a0 93 1f 40 	sts	0x401F, r26	; 0x80401f <B+0x2>
 408:	b0 93 20 40 	sts	0x4020, r27	; 0x804020 <B+0x3>
	C = ADC_read(DIODE_C);
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ADC_read>
 412:	a0 e0       	ldi	r26, 0x00	; 0
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	80 93 2a 40 	sts	0x402A, r24	; 0x80402a <C>
 41a:	90 93 2b 40 	sts	0x402B, r25	; 0x80402b <C+0x1>
 41e:	a0 93 2c 40 	sts	0x402C, r26	; 0x80402c <C+0x2>
 422:	b0 93 2d 40 	sts	0x402D, r27	; 0x80402d <C+0x3>
	D = ADC_read(DIODE_D);
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ADC_read>
 42c:	2c 01       	movw	r4, r24
 42e:	61 2c       	mov	r6, r1
 430:	71 2c       	mov	r7, r1
 432:	40 92 00 40 	sts	0x4000, r4	; 0x804000 <__DATA_REGION_ORIGIN__>
 436:	50 92 01 40 	sts	0x4001, r5	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 43a:	60 92 02 40 	sts	0x4002, r6	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
 43e:	70 92 03 40 	sts	0x4003, r7	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
	
	x = (float)(B+C-A-D)/(A+B+C+D)*r;
 442:	80 90 1d 40 	lds	r8, 0x401D	; 0x80401d <B>
 446:	90 90 1e 40 	lds	r9, 0x401E	; 0x80401e <B+0x1>
 44a:	a0 90 1f 40 	lds	r10, 0x401F	; 0x80401f <B+0x2>
 44e:	b0 90 20 40 	lds	r11, 0x4020	; 0x804020 <B+0x3>
 452:	c0 90 2a 40 	lds	r12, 0x402A	; 0x80402a <C>
 456:	d0 90 2b 40 	lds	r13, 0x402B	; 0x80402b <C+0x1>
 45a:	e0 90 2c 40 	lds	r14, 0x402C	; 0x80402c <C+0x2>
 45e:	f0 90 2d 40 	lds	r15, 0x402D	; 0x80402d <C+0x3>
 462:	20 91 0a 40 	lds	r18, 0x400A	; 0x80400a <A>
 466:	30 91 0b 40 	lds	r19, 0x400B	; 0x80400b <A+0x1>
 46a:	40 91 0c 40 	lds	r20, 0x400C	; 0x80400c <A+0x2>
 46e:	50 91 0d 40 	lds	r21, 0x400D	; 0x80400d <A+0x3>
 472:	29 83       	std	Y+1, r18	; 0x01
 474:	3a 83       	std	Y+2, r19	; 0x02
 476:	4b 83       	std	Y+3, r20	; 0x03
 478:	5c 83       	std	Y+4, r21	; 0x04
 47a:	28 0d       	add	r18, r8
 47c:	39 1d       	adc	r19, r9
 47e:	4a 1d       	adc	r20, r10
 480:	5b 1d       	adc	r21, r11
 482:	2d 83       	std	Y+5, r18	; 0x05
 484:	3e 83       	std	Y+6, r19	; 0x06
 486:	4f 83       	std	Y+7, r20	; 0x07
 488:	58 87       	std	Y+8, r21	; 0x08
 48a:	da 01       	movw	r26, r20
 48c:	c9 01       	movw	r24, r18
 48e:	8c 0d       	add	r24, r12
 490:	9d 1d       	adc	r25, r13
 492:	ae 1d       	adc	r26, r14
 494:	bf 1d       	adc	r27, r15
 496:	bc 01       	movw	r22, r24
 498:	cd 01       	movw	r24, r26
 49a:	64 0d       	add	r22, r4
 49c:	75 1d       	adc	r23, r5
 49e:	86 1d       	adc	r24, r6
 4a0:	97 1d       	adc	r25, r7
 4a2:	0e 94 87 05 	call	0xb0e	; 0xb0e <__floatsisf>
 4a6:	69 87       	std	Y+9, r22	; 0x09
 4a8:	7a 87       	std	Y+10, r23	; 0x0a
 4aa:	8b 87       	std	Y+11, r24	; 0x0b
 4ac:	9c 87       	std	Y+12, r25	; 0x0c
 4ae:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <r>
 4b2:	90 91 22 40 	lds	r25, 0x4022	; 0x804022 <r+0x1>
 4b6:	a0 91 23 40 	lds	r26, 0x4023	; 0x804023 <r+0x2>
 4ba:	b0 91 24 40 	lds	r27, 0x4024	; 0x804024 <r+0x3>
 4be:	8d 87       	std	Y+13, r24	; 0x0d
 4c0:	9e 87       	std	Y+14, r25	; 0x0e
 4c2:	af 87       	std	Y+15, r26	; 0x0f
 4c4:	b8 8b       	std	Y+16, r27	; 0x10
 4c6:	d5 01       	movw	r26, r10
 4c8:	c4 01       	movw	r24, r8
 4ca:	8c 0d       	add	r24, r12
 4cc:	9d 1d       	adc	r25, r13
 4ce:	ae 1d       	adc	r26, r14
 4d0:	bf 1d       	adc	r27, r15
 4d2:	29 81       	ldd	r18, Y+1	; 0x01
 4d4:	3a 81       	ldd	r19, Y+2	; 0x02
 4d6:	4b 81       	ldd	r20, Y+3	; 0x03
 4d8:	5c 81       	ldd	r21, Y+4	; 0x04
 4da:	82 1b       	sub	r24, r18
 4dc:	93 0b       	sbc	r25, r19
 4de:	a4 0b       	sbc	r26, r20
 4e0:	b5 0b       	sbc	r27, r21
 4e2:	bc 01       	movw	r22, r24
 4e4:	cd 01       	movw	r24, r26
 4e6:	64 19       	sub	r22, r4
 4e8:	75 09       	sbc	r23, r5
 4ea:	86 09       	sbc	r24, r6
 4ec:	97 09       	sbc	r25, r7
 4ee:	0e 94 87 05 	call	0xb0e	; 0xb0e <__floatsisf>
 4f2:	29 85       	ldd	r18, Y+9	; 0x09
 4f4:	3a 85       	ldd	r19, Y+10	; 0x0a
 4f6:	4b 85       	ldd	r20, Y+11	; 0x0b
 4f8:	5c 85       	ldd	r21, Y+12	; 0x0c
 4fa:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divsf3>
 4fe:	2d 85       	ldd	r18, Y+13	; 0x0d
 500:	3e 85       	ldd	r19, Y+14	; 0x0e
 502:	4f 85       	ldd	r20, Y+15	; 0x0f
 504:	58 89       	ldd	r21, Y+16	; 0x10
 506:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 50a:	4b 01       	movw	r8, r22
 50c:	5c 01       	movw	r10, r24
 50e:	60 93 05 40 	sts	0x4005, r22	; 0x804005 <x>
 512:	70 93 06 40 	sts	0x4006, r23	; 0x804006 <x+0x1>
 516:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <x+0x2>
 51a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <x+0x3>
	y = (float)(A+B-C-D)/(A+B+C+D)*r;
 51e:	8d 81       	ldd	r24, Y+5	; 0x05
 520:	9e 81       	ldd	r25, Y+6	; 0x06
 522:	af 81       	ldd	r26, Y+7	; 0x07
 524:	b8 85       	ldd	r27, Y+8	; 0x08
 526:	8c 19       	sub	r24, r12
 528:	9d 09       	sbc	r25, r13
 52a:	ae 09       	sbc	r26, r14
 52c:	bf 09       	sbc	r27, r15
 52e:	bc 01       	movw	r22, r24
 530:	cd 01       	movw	r24, r26
 532:	64 19       	sub	r22, r4
 534:	75 09       	sbc	r23, r5
 536:	86 09       	sbc	r24, r6
 538:	97 09       	sbc	r25, r7
 53a:	0e 94 87 05 	call	0xb0e	; 0xb0e <__floatsisf>
 53e:	29 85       	ldd	r18, Y+9	; 0x09
 540:	3a 85       	ldd	r19, Y+10	; 0x0a
 542:	4b 85       	ldd	r20, Y+11	; 0x0b
 544:	5c 85       	ldd	r21, Y+12	; 0x0c
 546:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divsf3>
 54a:	2d 85       	ldd	r18, Y+13	; 0x0d
 54c:	3e 85       	ldd	r19, Y+14	; 0x0e
 54e:	4f 85       	ldd	r20, Y+15	; 0x0f
 550:	58 89       	ldd	r21, Y+16	; 0x10
 552:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 556:	6b 01       	movw	r12, r22
 558:	7c 01       	movw	r14, r24
 55a:	60 93 36 40 	sts	0x4036, r22	; 0x804036 <y>
 55e:	70 93 37 40 	sts	0x4037, r23	; 0x804037 <y+0x1>
 562:	80 93 38 40 	sts	0x4038, r24	; 0x804038 <y+0x2>
 566:	90 93 39 40 	sts	0x4039, r25	; 0x804039 <y+0x3>
	Converting x and y to spherical coordinate angles
	phi and theta, and correcting theta to range from 0 to 360
	depending on the current quadrant
	*/
	
	phi = atan(sqrt(pow(x,2)+pow(y,2))/h);
 56a:	a5 01       	movw	r20, r10
 56c:	94 01       	movw	r18, r8
 56e:	c5 01       	movw	r24, r10
 570:	b4 01       	movw	r22, r8
 572:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 576:	2b 01       	movw	r4, r22
 578:	3c 01       	movw	r6, r24
 57a:	a7 01       	movw	r20, r14
 57c:	96 01       	movw	r18, r12
 57e:	c7 01       	movw	r24, r14
 580:	b6 01       	movw	r22, r12
 582:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 586:	69 83       	std	Y+1, r22	; 0x01
 588:	7a 83       	std	Y+2, r23	; 0x02
 58a:	8b 83       	std	Y+3, r24	; 0x03
 58c:	9c 83       	std	Y+4, r25	; 0x04
 58e:	29 81       	ldd	r18, Y+1	; 0x01
 590:	3a 81       	ldd	r19, Y+2	; 0x02
 592:	4b 81       	ldd	r20, Y+3	; 0x03
 594:	5c 81       	ldd	r21, Y+4	; 0x04
 596:	c3 01       	movw	r24, r6
 598:	b2 01       	movw	r22, r4
 59a:	0e 94 3f 04 	call	0x87e	; 0x87e <__addsf3>
 59e:	0e 94 49 07 	call	0xe92	; 0xe92 <sqrt>
 5a2:	20 91 41 40 	lds	r18, 0x4041	; 0x804041 <h>
 5a6:	30 91 42 40 	lds	r19, 0x4042	; 0x804042 <h+0x1>
 5aa:	40 91 43 40 	lds	r20, 0x4043	; 0x804043 <h+0x2>
 5ae:	50 91 44 40 	lds	r21, 0x4044	; 0x804044 <h+0x3>
 5b2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divsf3>
 5b6:	0e 94 ab 04 	call	0x956	; 0x956 <atan>
 5ba:	60 93 18 40 	sts	0x4018, r22	; 0x804018 <phi>
 5be:	70 93 19 40 	sts	0x4019, r23	; 0x804019 <phi+0x1>
 5c2:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <phi+0x2>
 5c6:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <phi+0x3>

	if(x < 0)			{theta = atan(y/x)+M_PI;}	//-x,+y and -x,-y
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	a9 01       	movw	r20, r18
 5d0:	c5 01       	movw	r24, r10
 5d2:	b4 01       	movw	r22, r8
 5d4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__cmpsf2>
 5d8:	88 23       	and	r24, r24
 5da:	bc f4       	brge	.+46     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5dc:	a5 01       	movw	r20, r10
 5de:	94 01       	movw	r18, r8
 5e0:	c7 01       	movw	r24, r14
 5e2:	b6 01       	movw	r22, r12
 5e4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divsf3>
 5e8:	0e 94 ab 04 	call	0x956	; 0x956 <atan>
 5ec:	2b ed       	ldi	r18, 0xDB	; 219
 5ee:	3f e0       	ldi	r19, 0x0F	; 15
 5f0:	49 e4       	ldi	r20, 0x49	; 73
 5f2:	50 e4       	ldi	r21, 0x40	; 64
 5f4:	0e 94 3f 04 	call	0x87e	; 0x87e <__addsf3>
 5f8:	60 93 25 40 	sts	0x4025, r22	; 0x804025 <theta>
 5fc:	70 93 26 40 	sts	0x4026, r23	; 0x804026 <theta+0x1>
 600:	80 93 27 40 	sts	0x4027, r24	; 0x804027 <theta+0x2>
 604:	90 93 28 40 	sts	0x4028, r25	; 0x804028 <theta+0x3>
 608:	42 c0       	rjmp	.+132    	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
	else{
		if(y < 0)		{theta = atan(y/x)+M_2_PI;}	//+x,-y
 60a:	20 e0       	ldi	r18, 0x00	; 0
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	a9 01       	movw	r20, r18
 610:	c7 01       	movw	r24, r14
 612:	b6 01       	movw	r22, r12
 614:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__cmpsf2>
 618:	88 23       	and	r24, r24
 61a:	bc f4       	brge	.+46     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 61c:	a5 01       	movw	r20, r10
 61e:	94 01       	movw	r18, r8
 620:	c7 01       	movw	r24, r14
 622:	b6 01       	movw	r22, r12
 624:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divsf3>
 628:	0e 94 ab 04 	call	0x956	; 0x956 <atan>
 62c:	23 e8       	ldi	r18, 0x83	; 131
 62e:	39 ef       	ldi	r19, 0xF9	; 249
 630:	42 e2       	ldi	r20, 0x22	; 34
 632:	5f e3       	ldi	r21, 0x3F	; 63
 634:	0e 94 3f 04 	call	0x87e	; 0x87e <__addsf3>
 638:	60 93 25 40 	sts	0x4025, r22	; 0x804025 <theta>
 63c:	70 93 26 40 	sts	0x4026, r23	; 0x804026 <theta+0x1>
 640:	80 93 27 40 	sts	0x4027, r24	; 0x804027 <theta+0x2>
 644:	90 93 28 40 	sts	0x4028, r25	; 0x804028 <theta+0x3>
 648:	22 c0       	rjmp	.+68     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
		else if(y > 0)	{theta = atan(y/x);}		//+x,+y
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	a9 01       	movw	r20, r18
 650:	c7 01       	movw	r24, r14
 652:	b6 01       	movw	r22, r12
 654:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__gesf2>
 658:	18 16       	cp	r1, r24
 65a:	8c f4       	brge	.+34     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 65c:	a5 01       	movw	r20, r10
 65e:	94 01       	movw	r18, r8
 660:	c7 01       	movw	r24, r14
 662:	b6 01       	movw	r22, r12
 664:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divsf3>
 668:	0e 94 ab 04 	call	0x956	; 0x956 <atan>
 66c:	60 93 25 40 	sts	0x4025, r22	; 0x804025 <theta>
 670:	70 93 26 40 	sts	0x4026, r23	; 0x804026 <theta+0x1>
 674:	80 93 27 40 	sts	0x4027, r24	; 0x804027 <theta+0x2>
 678:	90 93 28 40 	sts	0x4028, r25	; 0x804028 <theta+0x3>
 67c:	08 c0       	rjmp	.+16     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
		else			{theta = 0;}				//x=y=0
 67e:	10 92 25 40 	sts	0x4025, r1	; 0x804025 <theta>
 682:	10 92 26 40 	sts	0x4026, r1	; 0x804026 <theta+0x1>
 686:	10 92 27 40 	sts	0x4027, r1	; 0x804027 <theta+0x2>
 68a:	10 92 28 40 	sts	0x4028, r1	; 0x804028 <theta+0x3>
	}
}
 68e:	60 96       	adiw	r28, 0x10	; 16
 690:	cd bf       	out	0x3d, r28	; 61
 692:	de bf       	out	0x3e, r29	; 62
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	ff 90       	pop	r15
 69a:	ef 90       	pop	r14
 69c:	df 90       	pop	r13
 69e:	cf 90       	pop	r12
 6a0:	bf 90       	pop	r11
 6a2:	af 90       	pop	r10
 6a4:	9f 90       	pop	r9
 6a6:	8f 90       	pop	r8
 6a8:	7f 90       	pop	r7
 6aa:	6f 90       	pop	r6
 6ac:	5f 90       	pop	r5
 6ae:	4f 90       	pop	r4
 6b0:	08 95       	ret

000006b2 <setUpAngles>:

void setUpAngles(void){
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
	/*
	Converting phi and theta to degrees and loading into array
	as 16-bit values like this: angles[phiMSB, phiLSB, thetaMSB, thetaLSB]
	*/
	angles[0] = ((uint16_t)round(phi*180/M_PI*100) >> 8) & 0xFF;
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	44 e3       	ldi	r20, 0x34	; 52
 6bc:	53 e4       	ldi	r21, 0x43	; 67
 6be:	60 91 18 40 	lds	r22, 0x4018	; 0x804018 <phi>
 6c2:	70 91 19 40 	lds	r23, 0x4019	; 0x804019 <phi+0x1>
 6c6:	80 91 1a 40 	lds	r24, 0x401A	; 0x80401a <phi+0x2>
 6ca:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <phi+0x3>
 6ce:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 6d2:	2b ed       	ldi	r18, 0xDB	; 219
 6d4:	3f e0       	ldi	r19, 0x0F	; 15
 6d6:	49 e4       	ldi	r20, 0x49	; 73
 6d8:	50 e4       	ldi	r21, 0x40	; 64
 6da:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divsf3>
 6de:	20 e0       	ldi	r18, 0x00	; 0
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	48 ec       	ldi	r20, 0xC8	; 200
 6e4:	52 e4       	ldi	r21, 0x42	; 66
 6e6:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 6ea:	0e 94 17 07 	call	0xe2e	; 0xe2e <round>
 6ee:	0e 94 56 05 	call	0xaac	; 0xaac <__fixunssfsi>
 6f2:	c4 e1       	ldi	r28, 0x14	; 20
 6f4:	d0 e4       	ldi	r29, 0x40	; 64
 6f6:	78 83       	st	Y, r23
	angles[1] = ((uint16_t)round(phi*180/M_PI*100) >> 0) & 0xFF;
 6f8:	69 83       	std	Y+1, r22	; 0x01
	angles[2] = ((uint16_t)round(theta*180/M_PI*100) >> 8) & 0xFF;
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	44 e3       	ldi	r20, 0x34	; 52
 700:	53 e4       	ldi	r21, 0x43	; 67
 702:	60 91 25 40 	lds	r22, 0x4025	; 0x804025 <theta>
 706:	70 91 26 40 	lds	r23, 0x4026	; 0x804026 <theta+0x1>
 70a:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <theta+0x2>
 70e:	90 91 28 40 	lds	r25, 0x4028	; 0x804028 <theta+0x3>
 712:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 716:	2b ed       	ldi	r18, 0xDB	; 219
 718:	3f e0       	ldi	r19, 0x0F	; 15
 71a:	49 e4       	ldi	r20, 0x49	; 73
 71c:	50 e4       	ldi	r21, 0x40	; 64
 71e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divsf3>
 722:	20 e0       	ldi	r18, 0x00	; 0
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	48 ec       	ldi	r20, 0xC8	; 200
 728:	52 e4       	ldi	r21, 0x42	; 66
 72a:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 72e:	0e 94 17 07 	call	0xe2e	; 0xe2e <round>
 732:	0e 94 56 05 	call	0xaac	; 0xaac <__fixunssfsi>
 736:	7a 83       	std	Y+2, r23	; 0x02
	angles[3] = ((uint16_t)round(theta*180/M_PI*100) >> 0) & 0xFF;
 738:	6b 83       	std	Y+3, r22	; 0x03
}
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <setUpVector>:

void setUpVector(void){
 740:	4f 92       	push	r4
 742:	5f 92       	push	r5
 744:	6f 92       	push	r6
 746:	7f 92       	push	r7
 748:	8f 92       	push	r8
 74a:	9f 92       	push	r9
 74c:	af 92       	push	r10
 74e:	bf 92       	push	r11
 750:	cf 92       	push	r12
 752:	df 92       	push	r13
 754:	ef 92       	push	r14
 756:	ff 92       	push	r15
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
	/*
	Converting spherical coordinates into a vector R[xMSB, xLSB, yMSB, yLSB, zMSB, zLSB]
	*/
	R_vect[0] = ((uint16_t)round(sin(phi)*cos(theta)*4096+2048) >> 8) & 0xFF; //xMSB
 75c:	c0 90 18 40 	lds	r12, 0x4018	; 0x804018 <phi>
 760:	d0 90 19 40 	lds	r13, 0x4019	; 0x804019 <phi+0x1>
 764:	e0 90 1a 40 	lds	r14, 0x401A	; 0x80401a <phi+0x2>
 768:	f0 90 1b 40 	lds	r15, 0x401B	; 0x80401b <phi+0x3>
 76c:	c7 01       	movw	r24, r14
 76e:	b6 01       	movw	r22, r12
 770:	0e 94 3b 07 	call	0xe76	; 0xe76 <sin>
 774:	4b 01       	movw	r8, r22
 776:	5c 01       	movw	r10, r24
 778:	40 90 25 40 	lds	r4, 0x4025	; 0x804025 <theta>
 77c:	50 90 26 40 	lds	r5, 0x4026	; 0x804026 <theta+0x1>
 780:	60 90 27 40 	lds	r6, 0x4027	; 0x804027 <theta+0x2>
 784:	70 90 28 40 	lds	r7, 0x4028	; 0x804028 <theta+0x3>
 788:	c3 01       	movw	r24, r6
 78a:	b2 01       	movw	r22, r4
 78c:	0e 94 df 04 	call	0x9be	; 0x9be <cos>
 790:	9b 01       	movw	r18, r22
 792:	ac 01       	movw	r20, r24
 794:	c5 01       	movw	r24, r10
 796:	b4 01       	movw	r22, r8
 798:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 79c:	20 e0       	ldi	r18, 0x00	; 0
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	40 e8       	ldi	r20, 0x80	; 128
 7a2:	55 e4       	ldi	r21, 0x45	; 69
 7a4:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 7a8:	20 e0       	ldi	r18, 0x00	; 0
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	55 e4       	ldi	r21, 0x45	; 69
 7b0:	0e 94 3f 04 	call	0x87e	; 0x87e <__addsf3>
 7b4:	0e 94 17 07 	call	0xe2e	; 0xe2e <round>
 7b8:	0e 94 56 05 	call	0xaac	; 0xaac <__fixunssfsi>
 7bc:	ca e3       	ldi	r28, 0x3A	; 58
 7be:	d0 e4       	ldi	r29, 0x40	; 64
 7c0:	78 83       	st	Y, r23
	R_vect[1] = ((uint16_t)round(sin(phi)*cos(theta)*4096+2048) >> 0) & 0xFF; //xLSB
 7c2:	69 83       	std	Y+1, r22	; 0x01
	R_vect[2] = ((uint16_t)round(sin(phi)*sin(theta)*4096+2048) >> 8) & 0xFF; //yMSB
 7c4:	c3 01       	movw	r24, r6
 7c6:	b2 01       	movw	r22, r4
 7c8:	0e 94 3b 07 	call	0xe76	; 0xe76 <sin>
 7cc:	9b 01       	movw	r18, r22
 7ce:	ac 01       	movw	r20, r24
 7d0:	c5 01       	movw	r24, r10
 7d2:	b4 01       	movw	r22, r8
 7d4:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 7d8:	20 e0       	ldi	r18, 0x00	; 0
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	40 e8       	ldi	r20, 0x80	; 128
 7de:	55 e4       	ldi	r21, 0x45	; 69
 7e0:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 7e4:	20 e0       	ldi	r18, 0x00	; 0
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	55 e4       	ldi	r21, 0x45	; 69
 7ec:	0e 94 3f 04 	call	0x87e	; 0x87e <__addsf3>
 7f0:	0e 94 17 07 	call	0xe2e	; 0xe2e <round>
 7f4:	0e 94 56 05 	call	0xaac	; 0xaac <__fixunssfsi>
 7f8:	7a 83       	std	Y+2, r23	; 0x02
	R_vect[3] = ((uint16_t)round(sin(phi)*sin(theta)*4096+2048) >> 8) & 0x00; //yLSB
 7fa:	1b 82       	std	Y+3, r1	; 0x03
	R_vect[4] = ((uint16_t)round(cos(phi)*5120-4096) >> 8) & 0xFF;            //zMSB
 7fc:	c7 01       	movw	r24, r14
 7fe:	b6 01       	movw	r22, r12
 800:	0e 94 df 04 	call	0x9be	; 0x9be <cos>
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	40 ea       	ldi	r20, 0xA0	; 160
 80a:	55 e4       	ldi	r21, 0x45	; 69
 80c:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 810:	20 e0       	ldi	r18, 0x00	; 0
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	40 e8       	ldi	r20, 0x80	; 128
 816:	55 e4       	ldi	r21, 0x45	; 69
 818:	0e 94 3e 04 	call	0x87c	; 0x87c <__subsf3>
 81c:	0e 94 17 07 	call	0xe2e	; 0xe2e <round>
 820:	0e 94 56 05 	call	0xaac	; 0xaac <__fixunssfsi>
 824:	7c 83       	std	Y+4, r23	; 0x04
	R_vect[5] = ((uint16_t)round(cos(phi)*5120-4096) >> 0) & 0xFF;            //zLSB
 826:	6d 83       	std	Y+5, r22	; 0x05
}
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	ff 90       	pop	r15
 82e:	ef 90       	pop	r14
 830:	df 90       	pop	r13
 832:	cf 90       	pop	r12
 834:	bf 90       	pop	r11
 836:	af 90       	pop	r10
 838:	9f 90       	pop	r9
 83a:	8f 90       	pop	r8
 83c:	7f 90       	pop	r7
 83e:	6f 90       	pop	r6
 840:	5f 90       	pop	r5
 842:	4f 90       	pop	r4
 844:	08 95       	ret

00000846 <setUpADCvalues>:

void setUpADCvalues(void){
	ADC_values[0] = (uint16_t)(A >> 8) & 0xFF;
 846:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <A>
 84a:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <A+0x1>
 84e:	ee e2       	ldi	r30, 0x2E	; 46
 850:	f0 e4       	ldi	r31, 0x40	; 64
 852:	90 83       	st	Z, r25
	ADC_values[1] = (uint16_t)(A >> 0) & 0xFF;
 854:	81 83       	std	Z+1, r24	; 0x01
	ADC_values[2] = (uint16_t)(B >> 8) & 0xFF;
 856:	80 91 1d 40 	lds	r24, 0x401D	; 0x80401d <B>
 85a:	90 91 1e 40 	lds	r25, 0x401E	; 0x80401e <B+0x1>
 85e:	92 83       	std	Z+2, r25	; 0x02
	ADC_values[3] = (uint16_t)(B >> 0) & 0xFF;
 860:	83 83       	std	Z+3, r24	; 0x03
	ADC_values[4] = (uint16_t)(C >> 8) & 0xFF;
 862:	80 91 2a 40 	lds	r24, 0x402A	; 0x80402a <C>
 866:	90 91 2b 40 	lds	r25, 0x402B	; 0x80402b <C+0x1>
 86a:	94 83       	std	Z+4, r25	; 0x04
	ADC_values[5] = (uint16_t)(C >> 0) & 0xFF;
 86c:	85 83       	std	Z+5, r24	; 0x05
	ADC_values[6] = (uint16_t)(D >> 8) & 0xFF;
 86e:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 872:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 876:	96 83       	std	Z+6, r25	; 0x06
	ADC_values[7] = (uint16_t)(D >> 0) & 0xFF;
 878:	87 83       	std	Z+7, r24	; 0x07
 87a:	08 95       	ret

0000087c <__subsf3>:
 87c:	50 58       	subi	r21, 0x80	; 128

0000087e <__addsf3>:
 87e:	bb 27       	eor	r27, r27
 880:	aa 27       	eor	r26, r26
 882:	0e 94 56 04 	call	0x8ac	; 0x8ac <__addsf3x>
 886:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_round>
 88a:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_pscA>
 88e:	38 f0       	brcs	.+14     	; 0x89e <__addsf3+0x20>
 890:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_pscB>
 894:	20 f0       	brcs	.+8      	; 0x89e <__addsf3+0x20>
 896:	39 f4       	brne	.+14     	; 0x8a6 <__addsf3+0x28>
 898:	9f 3f       	cpi	r25, 0xFF	; 255
 89a:	19 f4       	brne	.+6      	; 0x8a2 <__addsf3+0x24>
 89c:	26 f4       	brtc	.+8      	; 0x8a6 <__addsf3+0x28>
 89e:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_nan>
 8a2:	0e f4       	brtc	.+2      	; 0x8a6 <__addsf3+0x28>
 8a4:	e0 95       	com	r30
 8a6:	e7 fb       	bst	r30, 7
 8a8:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_inf>

000008ac <__addsf3x>:
 8ac:	e9 2f       	mov	r30, r25
 8ae:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_split3>
 8b2:	58 f3       	brcs	.-42     	; 0x88a <__addsf3+0xc>
 8b4:	ba 17       	cp	r27, r26
 8b6:	62 07       	cpc	r22, r18
 8b8:	73 07       	cpc	r23, r19
 8ba:	84 07       	cpc	r24, r20
 8bc:	95 07       	cpc	r25, r21
 8be:	20 f0       	brcs	.+8      	; 0x8c8 <__addsf3x+0x1c>
 8c0:	79 f4       	brne	.+30     	; 0x8e0 <__addsf3x+0x34>
 8c2:	a6 f5       	brtc	.+104    	; 0x92c <__addsf3x+0x80>
 8c4:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_zero>
 8c8:	0e f4       	brtc	.+2      	; 0x8cc <__addsf3x+0x20>
 8ca:	e0 95       	com	r30
 8cc:	0b 2e       	mov	r0, r27
 8ce:	ba 2f       	mov	r27, r26
 8d0:	a0 2d       	mov	r26, r0
 8d2:	0b 01       	movw	r0, r22
 8d4:	b9 01       	movw	r22, r18
 8d6:	90 01       	movw	r18, r0
 8d8:	0c 01       	movw	r0, r24
 8da:	ca 01       	movw	r24, r20
 8dc:	a0 01       	movw	r20, r0
 8de:	11 24       	eor	r1, r1
 8e0:	ff 27       	eor	r31, r31
 8e2:	59 1b       	sub	r21, r25
 8e4:	99 f0       	breq	.+38     	; 0x90c <__addsf3x+0x60>
 8e6:	59 3f       	cpi	r21, 0xF9	; 249
 8e8:	50 f4       	brcc	.+20     	; 0x8fe <__addsf3x+0x52>
 8ea:	50 3e       	cpi	r21, 0xE0	; 224
 8ec:	68 f1       	brcs	.+90     	; 0x948 <__addsf3x+0x9c>
 8ee:	1a 16       	cp	r1, r26
 8f0:	f0 40       	sbci	r31, 0x00	; 0
 8f2:	a2 2f       	mov	r26, r18
 8f4:	23 2f       	mov	r18, r19
 8f6:	34 2f       	mov	r19, r20
 8f8:	44 27       	eor	r20, r20
 8fa:	58 5f       	subi	r21, 0xF8	; 248
 8fc:	f3 cf       	rjmp	.-26     	; 0x8e4 <__addsf3x+0x38>
 8fe:	46 95       	lsr	r20
 900:	37 95       	ror	r19
 902:	27 95       	ror	r18
 904:	a7 95       	ror	r26
 906:	f0 40       	sbci	r31, 0x00	; 0
 908:	53 95       	inc	r21
 90a:	c9 f7       	brne	.-14     	; 0x8fe <__addsf3x+0x52>
 90c:	7e f4       	brtc	.+30     	; 0x92c <__addsf3x+0x80>
 90e:	1f 16       	cp	r1, r31
 910:	ba 0b       	sbc	r27, r26
 912:	62 0b       	sbc	r22, r18
 914:	73 0b       	sbc	r23, r19
 916:	84 0b       	sbc	r24, r20
 918:	ba f0       	brmi	.+46     	; 0x948 <__addsf3x+0x9c>
 91a:	91 50       	subi	r25, 0x01	; 1
 91c:	a1 f0       	breq	.+40     	; 0x946 <__addsf3x+0x9a>
 91e:	ff 0f       	add	r31, r31
 920:	bb 1f       	adc	r27, r27
 922:	66 1f       	adc	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	c2 f7       	brpl	.-16     	; 0x91a <__addsf3x+0x6e>
 92a:	0e c0       	rjmp	.+28     	; 0x948 <__addsf3x+0x9c>
 92c:	ba 0f       	add	r27, r26
 92e:	62 1f       	adc	r22, r18
 930:	73 1f       	adc	r23, r19
 932:	84 1f       	adc	r24, r20
 934:	48 f4       	brcc	.+18     	; 0x948 <__addsf3x+0x9c>
 936:	87 95       	ror	r24
 938:	77 95       	ror	r23
 93a:	67 95       	ror	r22
 93c:	b7 95       	ror	r27
 93e:	f7 95       	ror	r31
 940:	9e 3f       	cpi	r25, 0xFE	; 254
 942:	08 f0       	brcs	.+2      	; 0x946 <__addsf3x+0x9a>
 944:	b0 cf       	rjmp	.-160    	; 0x8a6 <__addsf3+0x28>
 946:	93 95       	inc	r25
 948:	88 0f       	add	r24, r24
 94a:	08 f0       	brcs	.+2      	; 0x94e <__addsf3x+0xa2>
 94c:	99 27       	eor	r25, r25
 94e:	ee 0f       	add	r30, r30
 950:	97 95       	ror	r25
 952:	87 95       	ror	r24
 954:	08 95       	ret

00000956 <atan>:
 956:	df 93       	push	r29
 958:	dd 27       	eor	r29, r29
 95a:	b9 2f       	mov	r27, r25
 95c:	bf 77       	andi	r27, 0x7F	; 127
 95e:	40 e8       	ldi	r20, 0x80	; 128
 960:	5f e3       	ldi	r21, 0x3F	; 63
 962:	16 16       	cp	r1, r22
 964:	17 06       	cpc	r1, r23
 966:	48 07       	cpc	r20, r24
 968:	5b 07       	cpc	r21, r27
 96a:	18 f4       	brcc	.+6      	; 0x972 <atan+0x1c>
 96c:	d9 2f       	mov	r29, r25
 96e:	0e 94 a2 06 	call	0xd44	; 0xd44 <inverse>
 972:	9f 93       	push	r25
 974:	8f 93       	push	r24
 976:	7f 93       	push	r23
 978:	6f 93       	push	r22
 97a:	0e 94 89 07 	call	0xf12	; 0xf12 <square>
 97e:	e4 ef       	ldi	r30, 0xF4	; 244
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_powser>
 986:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_round>
 98a:	2f 91       	pop	r18
 98c:	3f 91       	pop	r19
 98e:	4f 91       	pop	r20
 990:	5f 91       	pop	r21
 992:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3x>
 996:	dd 23       	and	r29, r29
 998:	51 f0       	breq	.+20     	; 0x9ae <atan+0x58>
 99a:	90 58       	subi	r25, 0x80	; 128
 99c:	a2 ea       	ldi	r26, 0xA2	; 162
 99e:	2a ed       	ldi	r18, 0xDA	; 218
 9a0:	3f e0       	ldi	r19, 0x0F	; 15
 9a2:	49 ec       	ldi	r20, 0xC9	; 201
 9a4:	5f e3       	ldi	r21, 0x3F	; 63
 9a6:	d0 78       	andi	r29, 0x80	; 128
 9a8:	5d 27       	eor	r21, r29
 9aa:	0e 94 56 04 	call	0x8ac	; 0x8ac <__addsf3x>
 9ae:	df 91       	pop	r29
 9b0:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_round>

000009b4 <__cmpsf2>:
 9b4:	0e 94 c2 05 	call	0xb84	; 0xb84 <__fp_cmp>
 9b8:	08 f4       	brcc	.+2      	; 0x9bc <__cmpsf2+0x8>
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	08 95       	ret

000009be <cos>:
 9be:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_rempio2>
 9c2:	e3 95       	inc	r30
 9c4:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_sinus>

000009c8 <__divsf3>:
 9c8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__divsf3x>
 9cc:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_round>
 9d0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_pscB>
 9d4:	58 f0       	brcs	.+22     	; 0x9ec <__divsf3+0x24>
 9d6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_pscA>
 9da:	40 f0       	brcs	.+16     	; 0x9ec <__divsf3+0x24>
 9dc:	29 f4       	brne	.+10     	; 0x9e8 <__divsf3+0x20>
 9de:	5f 3f       	cpi	r21, 0xFF	; 255
 9e0:	29 f0       	breq	.+10     	; 0x9ec <__divsf3+0x24>
 9e2:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_inf>
 9e6:	51 11       	cpse	r21, r1
 9e8:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_szero>
 9ec:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_nan>

000009f0 <__divsf3x>:
 9f0:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_split3>
 9f4:	68 f3       	brcs	.-38     	; 0x9d0 <__divsf3+0x8>

000009f6 <__divsf3_pse>:
 9f6:	99 23       	and	r25, r25
 9f8:	b1 f3       	breq	.-20     	; 0x9e6 <__divsf3+0x1e>
 9fa:	55 23       	and	r21, r21
 9fc:	91 f3       	breq	.-28     	; 0x9e2 <__divsf3+0x1a>
 9fe:	95 1b       	sub	r25, r21
 a00:	55 0b       	sbc	r21, r21
 a02:	bb 27       	eor	r27, r27
 a04:	aa 27       	eor	r26, r26
 a06:	62 17       	cp	r22, r18
 a08:	73 07       	cpc	r23, r19
 a0a:	84 07       	cpc	r24, r20
 a0c:	38 f0       	brcs	.+14     	; 0xa1c <__divsf3_pse+0x26>
 a0e:	9f 5f       	subi	r25, 0xFF	; 255
 a10:	5f 4f       	sbci	r21, 0xFF	; 255
 a12:	22 0f       	add	r18, r18
 a14:	33 1f       	adc	r19, r19
 a16:	44 1f       	adc	r20, r20
 a18:	aa 1f       	adc	r26, r26
 a1a:	a9 f3       	breq	.-22     	; 0xa06 <__divsf3_pse+0x10>
 a1c:	35 d0       	rcall	.+106    	; 0xa88 <__divsf3_pse+0x92>
 a1e:	0e 2e       	mov	r0, r30
 a20:	3a f0       	brmi	.+14     	; 0xa30 <__divsf3_pse+0x3a>
 a22:	e0 e8       	ldi	r30, 0x80	; 128
 a24:	32 d0       	rcall	.+100    	; 0xa8a <__divsf3_pse+0x94>
 a26:	91 50       	subi	r25, 0x01	; 1
 a28:	50 40       	sbci	r21, 0x00	; 0
 a2a:	e6 95       	lsr	r30
 a2c:	00 1c       	adc	r0, r0
 a2e:	ca f7       	brpl	.-14     	; 0xa22 <__divsf3_pse+0x2c>
 a30:	2b d0       	rcall	.+86     	; 0xa88 <__divsf3_pse+0x92>
 a32:	fe 2f       	mov	r31, r30
 a34:	29 d0       	rcall	.+82     	; 0xa88 <__divsf3_pse+0x92>
 a36:	66 0f       	add	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	88 1f       	adc	r24, r24
 a3c:	bb 1f       	adc	r27, r27
 a3e:	26 17       	cp	r18, r22
 a40:	37 07       	cpc	r19, r23
 a42:	48 07       	cpc	r20, r24
 a44:	ab 07       	cpc	r26, r27
 a46:	b0 e8       	ldi	r27, 0x80	; 128
 a48:	09 f0       	breq	.+2      	; 0xa4c <__divsf3_pse+0x56>
 a4a:	bb 0b       	sbc	r27, r27
 a4c:	80 2d       	mov	r24, r0
 a4e:	bf 01       	movw	r22, r30
 a50:	ff 27       	eor	r31, r31
 a52:	93 58       	subi	r25, 0x83	; 131
 a54:	5f 4f       	sbci	r21, 0xFF	; 255
 a56:	3a f0       	brmi	.+14     	; 0xa66 <__divsf3_pse+0x70>
 a58:	9e 3f       	cpi	r25, 0xFE	; 254
 a5a:	51 05       	cpc	r21, r1
 a5c:	78 f0       	brcs	.+30     	; 0xa7c <__divsf3_pse+0x86>
 a5e:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_inf>
 a62:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_szero>
 a66:	5f 3f       	cpi	r21, 0xFF	; 255
 a68:	e4 f3       	brlt	.-8      	; 0xa62 <__divsf3_pse+0x6c>
 a6a:	98 3e       	cpi	r25, 0xE8	; 232
 a6c:	d4 f3       	brlt	.-12     	; 0xa62 <__divsf3_pse+0x6c>
 a6e:	86 95       	lsr	r24
 a70:	77 95       	ror	r23
 a72:	67 95       	ror	r22
 a74:	b7 95       	ror	r27
 a76:	f7 95       	ror	r31
 a78:	9f 5f       	subi	r25, 0xFF	; 255
 a7a:	c9 f7       	brne	.-14     	; 0xa6e <__divsf3_pse+0x78>
 a7c:	88 0f       	add	r24, r24
 a7e:	91 1d       	adc	r25, r1
 a80:	96 95       	lsr	r25
 a82:	87 95       	ror	r24
 a84:	97 f9       	bld	r25, 7
 a86:	08 95       	ret
 a88:	e1 e0       	ldi	r30, 0x01	; 1
 a8a:	66 0f       	add	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	88 1f       	adc	r24, r24
 a90:	bb 1f       	adc	r27, r27
 a92:	62 17       	cp	r22, r18
 a94:	73 07       	cpc	r23, r19
 a96:	84 07       	cpc	r24, r20
 a98:	ba 07       	cpc	r27, r26
 a9a:	20 f0       	brcs	.+8      	; 0xaa4 <__divsf3_pse+0xae>
 a9c:	62 1b       	sub	r22, r18
 a9e:	73 0b       	sbc	r23, r19
 aa0:	84 0b       	sbc	r24, r20
 aa2:	ba 0b       	sbc	r27, r26
 aa4:	ee 1f       	adc	r30, r30
 aa6:	88 f7       	brcc	.-30     	; 0xa8a <__divsf3_pse+0x94>
 aa8:	e0 95       	com	r30
 aaa:	08 95       	ret

00000aac <__fixunssfsi>:
 aac:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_splitA>
 ab0:	88 f0       	brcs	.+34     	; 0xad4 <__fixunssfsi+0x28>
 ab2:	9f 57       	subi	r25, 0x7F	; 127
 ab4:	98 f0       	brcs	.+38     	; 0xadc <__fixunssfsi+0x30>
 ab6:	b9 2f       	mov	r27, r25
 ab8:	99 27       	eor	r25, r25
 aba:	b7 51       	subi	r27, 0x17	; 23
 abc:	b0 f0       	brcs	.+44     	; 0xaea <__fixunssfsi+0x3e>
 abe:	e1 f0       	breq	.+56     	; 0xaf8 <__fixunssfsi+0x4c>
 ac0:	66 0f       	add	r22, r22
 ac2:	77 1f       	adc	r23, r23
 ac4:	88 1f       	adc	r24, r24
 ac6:	99 1f       	adc	r25, r25
 ac8:	1a f0       	brmi	.+6      	; 0xad0 <__fixunssfsi+0x24>
 aca:	ba 95       	dec	r27
 acc:	c9 f7       	brne	.-14     	; 0xac0 <__fixunssfsi+0x14>
 ace:	14 c0       	rjmp	.+40     	; 0xaf8 <__fixunssfsi+0x4c>
 ad0:	b1 30       	cpi	r27, 0x01	; 1
 ad2:	91 f0       	breq	.+36     	; 0xaf8 <__fixunssfsi+0x4c>
 ad4:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_zero>
 ad8:	b1 e0       	ldi	r27, 0x01	; 1
 ada:	08 95       	ret
 adc:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_zero>
 ae0:	67 2f       	mov	r22, r23
 ae2:	78 2f       	mov	r23, r24
 ae4:	88 27       	eor	r24, r24
 ae6:	b8 5f       	subi	r27, 0xF8	; 248
 ae8:	39 f0       	breq	.+14     	; 0xaf8 <__fixunssfsi+0x4c>
 aea:	b9 3f       	cpi	r27, 0xF9	; 249
 aec:	cc f3       	brlt	.-14     	; 0xae0 <__fixunssfsi+0x34>
 aee:	86 95       	lsr	r24
 af0:	77 95       	ror	r23
 af2:	67 95       	ror	r22
 af4:	b3 95       	inc	r27
 af6:	d9 f7       	brne	.-10     	; 0xaee <__fixunssfsi+0x42>
 af8:	3e f4       	brtc	.+14     	; 0xb08 <__fixunssfsi+0x5c>
 afa:	90 95       	com	r25
 afc:	80 95       	com	r24
 afe:	70 95       	com	r23
 b00:	61 95       	neg	r22
 b02:	7f 4f       	sbci	r23, 0xFF	; 255
 b04:	8f 4f       	sbci	r24, 0xFF	; 255
 b06:	9f 4f       	sbci	r25, 0xFF	; 255
 b08:	08 95       	ret

00000b0a <__floatunsisf>:
 b0a:	e8 94       	clt
 b0c:	09 c0       	rjmp	.+18     	; 0xb20 <__floatsisf+0x12>

00000b0e <__floatsisf>:
 b0e:	97 fb       	bst	r25, 7
 b10:	3e f4       	brtc	.+14     	; 0xb20 <__floatsisf+0x12>
 b12:	90 95       	com	r25
 b14:	80 95       	com	r24
 b16:	70 95       	com	r23
 b18:	61 95       	neg	r22
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	99 23       	and	r25, r25
 b22:	a9 f0       	breq	.+42     	; 0xb4e <__floatsisf+0x40>
 b24:	f9 2f       	mov	r31, r25
 b26:	96 e9       	ldi	r25, 0x96	; 150
 b28:	bb 27       	eor	r27, r27
 b2a:	93 95       	inc	r25
 b2c:	f6 95       	lsr	r31
 b2e:	87 95       	ror	r24
 b30:	77 95       	ror	r23
 b32:	67 95       	ror	r22
 b34:	b7 95       	ror	r27
 b36:	f1 11       	cpse	r31, r1
 b38:	f8 cf       	rjmp	.-16     	; 0xb2a <__floatsisf+0x1c>
 b3a:	fa f4       	brpl	.+62     	; 0xb7a <__floatsisf+0x6c>
 b3c:	bb 0f       	add	r27, r27
 b3e:	11 f4       	brne	.+4      	; 0xb44 <__floatsisf+0x36>
 b40:	60 ff       	sbrs	r22, 0
 b42:	1b c0       	rjmp	.+54     	; 0xb7a <__floatsisf+0x6c>
 b44:	6f 5f       	subi	r22, 0xFF	; 255
 b46:	7f 4f       	sbci	r23, 0xFF	; 255
 b48:	8f 4f       	sbci	r24, 0xFF	; 255
 b4a:	9f 4f       	sbci	r25, 0xFF	; 255
 b4c:	16 c0       	rjmp	.+44     	; 0xb7a <__floatsisf+0x6c>
 b4e:	88 23       	and	r24, r24
 b50:	11 f0       	breq	.+4      	; 0xb56 <__floatsisf+0x48>
 b52:	96 e9       	ldi	r25, 0x96	; 150
 b54:	11 c0       	rjmp	.+34     	; 0xb78 <__floatsisf+0x6a>
 b56:	77 23       	and	r23, r23
 b58:	21 f0       	breq	.+8      	; 0xb62 <__floatsisf+0x54>
 b5a:	9e e8       	ldi	r25, 0x8E	; 142
 b5c:	87 2f       	mov	r24, r23
 b5e:	76 2f       	mov	r23, r22
 b60:	05 c0       	rjmp	.+10     	; 0xb6c <__floatsisf+0x5e>
 b62:	66 23       	and	r22, r22
 b64:	71 f0       	breq	.+28     	; 0xb82 <__floatsisf+0x74>
 b66:	96 e8       	ldi	r25, 0x86	; 134
 b68:	86 2f       	mov	r24, r22
 b6a:	70 e0       	ldi	r23, 0x00	; 0
 b6c:	60 e0       	ldi	r22, 0x00	; 0
 b6e:	2a f0       	brmi	.+10     	; 0xb7a <__floatsisf+0x6c>
 b70:	9a 95       	dec	r25
 b72:	66 0f       	add	r22, r22
 b74:	77 1f       	adc	r23, r23
 b76:	88 1f       	adc	r24, r24
 b78:	da f7       	brpl	.-10     	; 0xb70 <__floatsisf+0x62>
 b7a:	88 0f       	add	r24, r24
 b7c:	96 95       	lsr	r25
 b7e:	87 95       	ror	r24
 b80:	97 f9       	bld	r25, 7
 b82:	08 95       	ret

00000b84 <__fp_cmp>:
 b84:	99 0f       	add	r25, r25
 b86:	00 08       	sbc	r0, r0
 b88:	55 0f       	add	r21, r21
 b8a:	aa 0b       	sbc	r26, r26
 b8c:	e0 e8       	ldi	r30, 0x80	; 128
 b8e:	fe ef       	ldi	r31, 0xFE	; 254
 b90:	16 16       	cp	r1, r22
 b92:	17 06       	cpc	r1, r23
 b94:	e8 07       	cpc	r30, r24
 b96:	f9 07       	cpc	r31, r25
 b98:	c0 f0       	brcs	.+48     	; 0xbca <__fp_cmp+0x46>
 b9a:	12 16       	cp	r1, r18
 b9c:	13 06       	cpc	r1, r19
 b9e:	e4 07       	cpc	r30, r20
 ba0:	f5 07       	cpc	r31, r21
 ba2:	98 f0       	brcs	.+38     	; 0xbca <__fp_cmp+0x46>
 ba4:	62 1b       	sub	r22, r18
 ba6:	73 0b       	sbc	r23, r19
 ba8:	84 0b       	sbc	r24, r20
 baa:	95 0b       	sbc	r25, r21
 bac:	39 f4       	brne	.+14     	; 0xbbc <__fp_cmp+0x38>
 bae:	0a 26       	eor	r0, r26
 bb0:	61 f0       	breq	.+24     	; 0xbca <__fp_cmp+0x46>
 bb2:	23 2b       	or	r18, r19
 bb4:	24 2b       	or	r18, r20
 bb6:	25 2b       	or	r18, r21
 bb8:	21 f4       	brne	.+8      	; 0xbc2 <__fp_cmp+0x3e>
 bba:	08 95       	ret
 bbc:	0a 26       	eor	r0, r26
 bbe:	09 f4       	brne	.+2      	; 0xbc2 <__fp_cmp+0x3e>
 bc0:	a1 40       	sbci	r26, 0x01	; 1
 bc2:	a6 95       	lsr	r26
 bc4:	8f ef       	ldi	r24, 0xFF	; 255
 bc6:	81 1d       	adc	r24, r1
 bc8:	81 1d       	adc	r24, r1
 bca:	08 95       	ret

00000bcc <__fp_inf>:
 bcc:	97 f9       	bld	r25, 7
 bce:	9f 67       	ori	r25, 0x7F	; 127
 bd0:	80 e8       	ldi	r24, 0x80	; 128
 bd2:	70 e0       	ldi	r23, 0x00	; 0
 bd4:	60 e0       	ldi	r22, 0x00	; 0
 bd6:	08 95       	ret

00000bd8 <__fp_nan>:
 bd8:	9f ef       	ldi	r25, 0xFF	; 255
 bda:	80 ec       	ldi	r24, 0xC0	; 192
 bdc:	08 95       	ret

00000bde <__fp_powser>:
 bde:	df 93       	push	r29
 be0:	cf 93       	push	r28
 be2:	1f 93       	push	r17
 be4:	0f 93       	push	r16
 be6:	ff 92       	push	r15
 be8:	ef 92       	push	r14
 bea:	df 92       	push	r13
 bec:	7b 01       	movw	r14, r22
 bee:	8c 01       	movw	r16, r24
 bf0:	68 94       	set
 bf2:	06 c0       	rjmp	.+12     	; 0xc00 <__fp_powser+0x22>
 bf4:	da 2e       	mov	r13, r26
 bf6:	ef 01       	movw	r28, r30
 bf8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3x>
 bfc:	fe 01       	movw	r30, r28
 bfe:	e8 94       	clt
 c00:	a5 91       	lpm	r26, Z+
 c02:	25 91       	lpm	r18, Z+
 c04:	35 91       	lpm	r19, Z+
 c06:	45 91       	lpm	r20, Z+
 c08:	55 91       	lpm	r21, Z+
 c0a:	a6 f3       	brts	.-24     	; 0xbf4 <__fp_powser+0x16>
 c0c:	ef 01       	movw	r28, r30
 c0e:	0e 94 56 04 	call	0x8ac	; 0x8ac <__addsf3x>
 c12:	fe 01       	movw	r30, r28
 c14:	97 01       	movw	r18, r14
 c16:	a8 01       	movw	r20, r16
 c18:	da 94       	dec	r13
 c1a:	69 f7       	brne	.-38     	; 0xbf6 <__fp_powser+0x18>
 c1c:	df 90       	pop	r13
 c1e:	ef 90       	pop	r14
 c20:	ff 90       	pop	r15
 c22:	0f 91       	pop	r16
 c24:	1f 91       	pop	r17
 c26:	cf 91       	pop	r28
 c28:	df 91       	pop	r29
 c2a:	08 95       	ret

00000c2c <__fp_pscA>:
 c2c:	00 24       	eor	r0, r0
 c2e:	0a 94       	dec	r0
 c30:	16 16       	cp	r1, r22
 c32:	17 06       	cpc	r1, r23
 c34:	18 06       	cpc	r1, r24
 c36:	09 06       	cpc	r0, r25
 c38:	08 95       	ret

00000c3a <__fp_pscB>:
 c3a:	00 24       	eor	r0, r0
 c3c:	0a 94       	dec	r0
 c3e:	12 16       	cp	r1, r18
 c40:	13 06       	cpc	r1, r19
 c42:	14 06       	cpc	r1, r20
 c44:	05 06       	cpc	r0, r21
 c46:	08 95       	ret
 c48:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_nan>

00000c4c <__fp_rempio2>:
 c4c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_splitA>
 c50:	d8 f3       	brcs	.-10     	; 0xc48 <__fp_pscB+0xe>
 c52:	e8 94       	clt
 c54:	e0 e0       	ldi	r30, 0x00	; 0
 c56:	bb 27       	eor	r27, r27
 c58:	9f 57       	subi	r25, 0x7F	; 127
 c5a:	f0 f0       	brcs	.+60     	; 0xc98 <__fp_rempio2+0x4c>
 c5c:	2a ed       	ldi	r18, 0xDA	; 218
 c5e:	3f e0       	ldi	r19, 0x0F	; 15
 c60:	49 ec       	ldi	r20, 0xC9	; 201
 c62:	06 c0       	rjmp	.+12     	; 0xc70 <__fp_rempio2+0x24>
 c64:	ee 0f       	add	r30, r30
 c66:	bb 0f       	add	r27, r27
 c68:	66 1f       	adc	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	28 f0       	brcs	.+10     	; 0xc7a <__fp_rempio2+0x2e>
 c70:	b2 3a       	cpi	r27, 0xA2	; 162
 c72:	62 07       	cpc	r22, r18
 c74:	73 07       	cpc	r23, r19
 c76:	84 07       	cpc	r24, r20
 c78:	28 f0       	brcs	.+10     	; 0xc84 <__fp_rempio2+0x38>
 c7a:	b2 5a       	subi	r27, 0xA2	; 162
 c7c:	62 0b       	sbc	r22, r18
 c7e:	73 0b       	sbc	r23, r19
 c80:	84 0b       	sbc	r24, r20
 c82:	e3 95       	inc	r30
 c84:	9a 95       	dec	r25
 c86:	72 f7       	brpl	.-36     	; 0xc64 <__fp_rempio2+0x18>
 c88:	80 38       	cpi	r24, 0x80	; 128
 c8a:	30 f4       	brcc	.+12     	; 0xc98 <__fp_rempio2+0x4c>
 c8c:	9a 95       	dec	r25
 c8e:	bb 0f       	add	r27, r27
 c90:	66 1f       	adc	r22, r22
 c92:	77 1f       	adc	r23, r23
 c94:	88 1f       	adc	r24, r24
 c96:	d2 f7       	brpl	.-12     	; 0xc8c <__fp_rempio2+0x40>
 c98:	90 48       	sbci	r25, 0x80	; 128
 c9a:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__fp_mpack_finite>

00000c9e <__fp_round>:
 c9e:	09 2e       	mov	r0, r25
 ca0:	03 94       	inc	r0
 ca2:	00 0c       	add	r0, r0
 ca4:	11 f4       	brne	.+4      	; 0xcaa <__fp_round+0xc>
 ca6:	88 23       	and	r24, r24
 ca8:	52 f0       	brmi	.+20     	; 0xcbe <__fp_round+0x20>
 caa:	bb 0f       	add	r27, r27
 cac:	40 f4       	brcc	.+16     	; 0xcbe <__fp_round+0x20>
 cae:	bf 2b       	or	r27, r31
 cb0:	11 f4       	brne	.+4      	; 0xcb6 <__fp_round+0x18>
 cb2:	60 ff       	sbrs	r22, 0
 cb4:	04 c0       	rjmp	.+8      	; 0xcbe <__fp_round+0x20>
 cb6:	6f 5f       	subi	r22, 0xFF	; 255
 cb8:	7f 4f       	sbci	r23, 0xFF	; 255
 cba:	8f 4f       	sbci	r24, 0xFF	; 255
 cbc:	9f 4f       	sbci	r25, 0xFF	; 255
 cbe:	08 95       	ret

00000cc0 <__fp_sinus>:
 cc0:	ef 93       	push	r30
 cc2:	e0 ff       	sbrs	r30, 0
 cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <__fp_sinus+0x14>
 cc6:	a2 ea       	ldi	r26, 0xA2	; 162
 cc8:	2a ed       	ldi	r18, 0xDA	; 218
 cca:	3f e0       	ldi	r19, 0x0F	; 15
 ccc:	49 ec       	ldi	r20, 0xC9	; 201
 cce:	5f eb       	ldi	r21, 0xBF	; 191
 cd0:	0e 94 56 04 	call	0x8ac	; 0x8ac <__addsf3x>
 cd4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_round>
 cd8:	0f 90       	pop	r0
 cda:	03 94       	inc	r0
 cdc:	01 fc       	sbrc	r0, 1
 cde:	90 58       	subi	r25, 0x80	; 128
 ce0:	e1 e2       	ldi	r30, 0x21	; 33
 ce2:	f1 e0       	ldi	r31, 0x01	; 1
 ce4:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_powsodd>

00000ce8 <__fp_split3>:
 ce8:	57 fd       	sbrc	r21, 7
 cea:	90 58       	subi	r25, 0x80	; 128
 cec:	44 0f       	add	r20, r20
 cee:	55 1f       	adc	r21, r21
 cf0:	59 f0       	breq	.+22     	; 0xd08 <__fp_splitA+0x10>
 cf2:	5f 3f       	cpi	r21, 0xFF	; 255
 cf4:	71 f0       	breq	.+28     	; 0xd12 <__fp_splitA+0x1a>
 cf6:	47 95       	ror	r20

00000cf8 <__fp_splitA>:
 cf8:	88 0f       	add	r24, r24
 cfa:	97 fb       	bst	r25, 7
 cfc:	99 1f       	adc	r25, r25
 cfe:	61 f0       	breq	.+24     	; 0xd18 <__fp_splitA+0x20>
 d00:	9f 3f       	cpi	r25, 0xFF	; 255
 d02:	79 f0       	breq	.+30     	; 0xd22 <__fp_splitA+0x2a>
 d04:	87 95       	ror	r24
 d06:	08 95       	ret
 d08:	12 16       	cp	r1, r18
 d0a:	13 06       	cpc	r1, r19
 d0c:	14 06       	cpc	r1, r20
 d0e:	55 1f       	adc	r21, r21
 d10:	f2 cf       	rjmp	.-28     	; 0xcf6 <__fp_split3+0xe>
 d12:	46 95       	lsr	r20
 d14:	f1 df       	rcall	.-30     	; 0xcf8 <__fp_splitA>
 d16:	08 c0       	rjmp	.+16     	; 0xd28 <__fp_splitA+0x30>
 d18:	16 16       	cp	r1, r22
 d1a:	17 06       	cpc	r1, r23
 d1c:	18 06       	cpc	r1, r24
 d1e:	99 1f       	adc	r25, r25
 d20:	f1 cf       	rjmp	.-30     	; 0xd04 <__fp_splitA+0xc>
 d22:	86 95       	lsr	r24
 d24:	71 05       	cpc	r23, r1
 d26:	61 05       	cpc	r22, r1
 d28:	08 94       	sec
 d2a:	08 95       	ret

00000d2c <__fp_zero>:
 d2c:	e8 94       	clt

00000d2e <__fp_szero>:
 d2e:	bb 27       	eor	r27, r27
 d30:	66 27       	eor	r22, r22
 d32:	77 27       	eor	r23, r23
 d34:	cb 01       	movw	r24, r22
 d36:	97 f9       	bld	r25, 7
 d38:	08 95       	ret

00000d3a <__gesf2>:
 d3a:	0e 94 c2 05 	call	0xb84	; 0xb84 <__fp_cmp>
 d3e:	08 f4       	brcc	.+2      	; 0xd42 <__gesf2+0x8>
 d40:	8f ef       	ldi	r24, 0xFF	; 255
 d42:	08 95       	ret

00000d44 <inverse>:
 d44:	9b 01       	movw	r18, r22
 d46:	ac 01       	movw	r20, r24
 d48:	60 e0       	ldi	r22, 0x00	; 0
 d4a:	70 e0       	ldi	r23, 0x00	; 0
 d4c:	80 e8       	ldi	r24, 0x80	; 128
 d4e:	9f e3       	ldi	r25, 0x3F	; 63
 d50:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__divsf3>

00000d54 <__mulsf3>:
 d54:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3x>
 d58:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_round>
 d5c:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_pscA>
 d60:	38 f0       	brcs	.+14     	; 0xd70 <__mulsf3+0x1c>
 d62:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_pscB>
 d66:	20 f0       	brcs	.+8      	; 0xd70 <__mulsf3+0x1c>
 d68:	95 23       	and	r25, r21
 d6a:	11 f0       	breq	.+4      	; 0xd70 <__mulsf3+0x1c>
 d6c:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_inf>
 d70:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_nan>
 d74:	11 24       	eor	r1, r1
 d76:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_szero>

00000d7a <__mulsf3x>:
 d7a:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_split3>
 d7e:	70 f3       	brcs	.-36     	; 0xd5c <__mulsf3+0x8>

00000d80 <__mulsf3_pse>:
 d80:	95 9f       	mul	r25, r21
 d82:	c1 f3       	breq	.-16     	; 0xd74 <__mulsf3+0x20>
 d84:	95 0f       	add	r25, r21
 d86:	50 e0       	ldi	r21, 0x00	; 0
 d88:	55 1f       	adc	r21, r21
 d8a:	62 9f       	mul	r22, r18
 d8c:	f0 01       	movw	r30, r0
 d8e:	72 9f       	mul	r23, r18
 d90:	bb 27       	eor	r27, r27
 d92:	f0 0d       	add	r31, r0
 d94:	b1 1d       	adc	r27, r1
 d96:	63 9f       	mul	r22, r19
 d98:	aa 27       	eor	r26, r26
 d9a:	f0 0d       	add	r31, r0
 d9c:	b1 1d       	adc	r27, r1
 d9e:	aa 1f       	adc	r26, r26
 da0:	64 9f       	mul	r22, r20
 da2:	66 27       	eor	r22, r22
 da4:	b0 0d       	add	r27, r0
 da6:	a1 1d       	adc	r26, r1
 da8:	66 1f       	adc	r22, r22
 daa:	82 9f       	mul	r24, r18
 dac:	22 27       	eor	r18, r18
 dae:	b0 0d       	add	r27, r0
 db0:	a1 1d       	adc	r26, r1
 db2:	62 1f       	adc	r22, r18
 db4:	73 9f       	mul	r23, r19
 db6:	b0 0d       	add	r27, r0
 db8:	a1 1d       	adc	r26, r1
 dba:	62 1f       	adc	r22, r18
 dbc:	83 9f       	mul	r24, r19
 dbe:	a0 0d       	add	r26, r0
 dc0:	61 1d       	adc	r22, r1
 dc2:	22 1f       	adc	r18, r18
 dc4:	74 9f       	mul	r23, r20
 dc6:	33 27       	eor	r19, r19
 dc8:	a0 0d       	add	r26, r0
 dca:	61 1d       	adc	r22, r1
 dcc:	23 1f       	adc	r18, r19
 dce:	84 9f       	mul	r24, r20
 dd0:	60 0d       	add	r22, r0
 dd2:	21 1d       	adc	r18, r1
 dd4:	82 2f       	mov	r24, r18
 dd6:	76 2f       	mov	r23, r22
 dd8:	6a 2f       	mov	r22, r26
 dda:	11 24       	eor	r1, r1
 ddc:	9f 57       	subi	r25, 0x7F	; 127
 dde:	50 40       	sbci	r21, 0x00	; 0
 de0:	9a f0       	brmi	.+38     	; 0xe08 <__mulsf3_pse+0x88>
 de2:	f1 f0       	breq	.+60     	; 0xe20 <__mulsf3_pse+0xa0>
 de4:	88 23       	and	r24, r24
 de6:	4a f0       	brmi	.+18     	; 0xdfa <__mulsf3_pse+0x7a>
 de8:	ee 0f       	add	r30, r30
 dea:	ff 1f       	adc	r31, r31
 dec:	bb 1f       	adc	r27, r27
 dee:	66 1f       	adc	r22, r22
 df0:	77 1f       	adc	r23, r23
 df2:	88 1f       	adc	r24, r24
 df4:	91 50       	subi	r25, 0x01	; 1
 df6:	50 40       	sbci	r21, 0x00	; 0
 df8:	a9 f7       	brne	.-22     	; 0xde4 <__mulsf3_pse+0x64>
 dfa:	9e 3f       	cpi	r25, 0xFE	; 254
 dfc:	51 05       	cpc	r21, r1
 dfe:	80 f0       	brcs	.+32     	; 0xe20 <__mulsf3_pse+0xa0>
 e00:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_inf>
 e04:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_szero>
 e08:	5f 3f       	cpi	r21, 0xFF	; 255
 e0a:	e4 f3       	brlt	.-8      	; 0xe04 <__mulsf3_pse+0x84>
 e0c:	98 3e       	cpi	r25, 0xE8	; 232
 e0e:	d4 f3       	brlt	.-12     	; 0xe04 <__mulsf3_pse+0x84>
 e10:	86 95       	lsr	r24
 e12:	77 95       	ror	r23
 e14:	67 95       	ror	r22
 e16:	b7 95       	ror	r27
 e18:	f7 95       	ror	r31
 e1a:	e7 95       	ror	r30
 e1c:	9f 5f       	subi	r25, 0xFF	; 255
 e1e:	c1 f7       	brne	.-16     	; 0xe10 <__mulsf3_pse+0x90>
 e20:	fe 2b       	or	r31, r30
 e22:	88 0f       	add	r24, r24
 e24:	91 1d       	adc	r25, r1
 e26:	96 95       	lsr	r25
 e28:	87 95       	ror	r24
 e2a:	97 f9       	bld	r25, 7
 e2c:	08 95       	ret

00000e2e <round>:
 e2e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_splitA>
 e32:	e8 f0       	brcs	.+58     	; 0xe6e <round+0x40>
 e34:	9e 37       	cpi	r25, 0x7E	; 126
 e36:	e8 f0       	brcs	.+58     	; 0xe72 <round+0x44>
 e38:	96 39       	cpi	r25, 0x96	; 150
 e3a:	b8 f4       	brcc	.+46     	; 0xe6a <round+0x3c>
 e3c:	9e 38       	cpi	r25, 0x8E	; 142
 e3e:	48 f4       	brcc	.+18     	; 0xe52 <round+0x24>
 e40:	67 2f       	mov	r22, r23
 e42:	78 2f       	mov	r23, r24
 e44:	88 27       	eor	r24, r24
 e46:	98 5f       	subi	r25, 0xF8	; 248
 e48:	f9 cf       	rjmp	.-14     	; 0xe3c <round+0xe>
 e4a:	86 95       	lsr	r24
 e4c:	77 95       	ror	r23
 e4e:	67 95       	ror	r22
 e50:	93 95       	inc	r25
 e52:	95 39       	cpi	r25, 0x95	; 149
 e54:	d0 f3       	brcs	.-12     	; 0xe4a <round+0x1c>
 e56:	b6 2f       	mov	r27, r22
 e58:	b1 70       	andi	r27, 0x01	; 1
 e5a:	6b 0f       	add	r22, r27
 e5c:	71 1d       	adc	r23, r1
 e5e:	81 1d       	adc	r24, r1
 e60:	20 f4       	brcc	.+8      	; 0xe6a <round+0x3c>
 e62:	87 95       	ror	r24
 e64:	77 95       	ror	r23
 e66:	67 95       	ror	r22
 e68:	93 95       	inc	r25
 e6a:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_mintl>
 e6e:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_mpack>
 e72:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_szero>

00000e76 <sin>:
 e76:	9f 93       	push	r25
 e78:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_rempio2>
 e7c:	0f 90       	pop	r0
 e7e:	07 fc       	sbrc	r0, 7
 e80:	ee 5f       	subi	r30, 0xFE	; 254
 e82:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_sinus>
 e86:	19 f4       	brne	.+6      	; 0xe8e <sin+0x18>
 e88:	16 f4       	brtc	.+4      	; 0xe8e <sin+0x18>
 e8a:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_nan>
 e8e:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_mpack>

00000e92 <sqrt>:
 e92:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_splitA>
 e96:	b8 f3       	brcs	.-18     	; 0xe86 <sin+0x10>
 e98:	99 23       	and	r25, r25
 e9a:	c9 f3       	breq	.-14     	; 0xe8e <sin+0x18>
 e9c:	b6 f3       	brts	.-20     	; 0xe8a <sin+0x14>
 e9e:	9f 57       	subi	r25, 0x7F	; 127
 ea0:	55 0b       	sbc	r21, r21
 ea2:	87 ff       	sbrs	r24, 7
 ea4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_norm2>
 ea8:	00 24       	eor	r0, r0
 eaa:	a0 e6       	ldi	r26, 0x60	; 96
 eac:	40 ea       	ldi	r20, 0xA0	; 160
 eae:	90 01       	movw	r18, r0
 eb0:	80 58       	subi	r24, 0x80	; 128
 eb2:	56 95       	lsr	r21
 eb4:	97 95       	ror	r25
 eb6:	28 f4       	brcc	.+10     	; 0xec2 <sqrt+0x30>
 eb8:	80 5c       	subi	r24, 0xC0	; 192
 eba:	66 0f       	add	r22, r22
 ebc:	77 1f       	adc	r23, r23
 ebe:	88 1f       	adc	r24, r24
 ec0:	20 f0       	brcs	.+8      	; 0xeca <sqrt+0x38>
 ec2:	26 17       	cp	r18, r22
 ec4:	37 07       	cpc	r19, r23
 ec6:	48 07       	cpc	r20, r24
 ec8:	30 f4       	brcc	.+12     	; 0xed6 <sqrt+0x44>
 eca:	62 1b       	sub	r22, r18
 ecc:	73 0b       	sbc	r23, r19
 ece:	84 0b       	sbc	r24, r20
 ed0:	20 29       	or	r18, r0
 ed2:	31 29       	or	r19, r1
 ed4:	4a 2b       	or	r20, r26
 ed6:	a6 95       	lsr	r26
 ed8:	17 94       	ror	r1
 eda:	07 94       	ror	r0
 edc:	20 25       	eor	r18, r0
 ede:	31 25       	eor	r19, r1
 ee0:	4a 27       	eor	r20, r26
 ee2:	58 f7       	brcc	.-42     	; 0xeba <sqrt+0x28>
 ee4:	66 0f       	add	r22, r22
 ee6:	77 1f       	adc	r23, r23
 ee8:	88 1f       	adc	r24, r24
 eea:	20 f0       	brcs	.+8      	; 0xef4 <sqrt+0x62>
 eec:	26 17       	cp	r18, r22
 eee:	37 07       	cpc	r19, r23
 ef0:	48 07       	cpc	r20, r24
 ef2:	30 f4       	brcc	.+12     	; 0xf00 <sqrt+0x6e>
 ef4:	62 0b       	sbc	r22, r18
 ef6:	73 0b       	sbc	r23, r19
 ef8:	84 0b       	sbc	r24, r20
 efa:	20 0d       	add	r18, r0
 efc:	31 1d       	adc	r19, r1
 efe:	41 1d       	adc	r20, r1
 f00:	a0 95       	com	r26
 f02:	81 f7       	brne	.-32     	; 0xee4 <sqrt+0x52>
 f04:	b9 01       	movw	r22, r18
 f06:	84 2f       	mov	r24, r20
 f08:	91 58       	subi	r25, 0x81	; 129
 f0a:	88 0f       	add	r24, r24
 f0c:	96 95       	lsr	r25
 f0e:	87 95       	ror	r24
 f10:	08 95       	ret

00000f12 <square>:
 f12:	9b 01       	movw	r18, r22
 f14:	ac 01       	movw	r20, r24
 f16:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__mulsf3>

00000f1a <__fp_mintl>:
 f1a:	88 23       	and	r24, r24
 f1c:	71 f4       	brne	.+28     	; 0xf3a <__fp_mintl+0x20>
 f1e:	77 23       	and	r23, r23
 f20:	21 f0       	breq	.+8      	; 0xf2a <__fp_mintl+0x10>
 f22:	98 50       	subi	r25, 0x08	; 8
 f24:	87 2b       	or	r24, r23
 f26:	76 2f       	mov	r23, r22
 f28:	07 c0       	rjmp	.+14     	; 0xf38 <__fp_mintl+0x1e>
 f2a:	66 23       	and	r22, r22
 f2c:	11 f4       	brne	.+4      	; 0xf32 <__fp_mintl+0x18>
 f2e:	99 27       	eor	r25, r25
 f30:	0d c0       	rjmp	.+26     	; 0xf4c <__fp_mintl+0x32>
 f32:	90 51       	subi	r25, 0x10	; 16
 f34:	86 2b       	or	r24, r22
 f36:	70 e0       	ldi	r23, 0x00	; 0
 f38:	60 e0       	ldi	r22, 0x00	; 0
 f3a:	2a f0       	brmi	.+10     	; 0xf46 <__fp_mintl+0x2c>
 f3c:	9a 95       	dec	r25
 f3e:	66 0f       	add	r22, r22
 f40:	77 1f       	adc	r23, r23
 f42:	88 1f       	adc	r24, r24
 f44:	da f7       	brpl	.-10     	; 0xf3c <__fp_mintl+0x22>
 f46:	88 0f       	add	r24, r24
 f48:	96 95       	lsr	r25
 f4a:	87 95       	ror	r24
 f4c:	97 f9       	bld	r25, 7
 f4e:	08 95       	ret

00000f50 <__fp_mpack>:
 f50:	9f 3f       	cpi	r25, 0xFF	; 255
 f52:	31 f0       	breq	.+12     	; 0xf60 <__fp_mpack_finite+0xc>

00000f54 <__fp_mpack_finite>:
 f54:	91 50       	subi	r25, 0x01	; 1
 f56:	20 f4       	brcc	.+8      	; 0xf60 <__fp_mpack_finite+0xc>
 f58:	87 95       	ror	r24
 f5a:	77 95       	ror	r23
 f5c:	67 95       	ror	r22
 f5e:	b7 95       	ror	r27
 f60:	88 0f       	add	r24, r24
 f62:	91 1d       	adc	r25, r1
 f64:	96 95       	lsr	r25
 f66:	87 95       	ror	r24
 f68:	97 f9       	bld	r25, 7
 f6a:	08 95       	ret

00000f6c <__fp_norm2>:
 f6c:	91 50       	subi	r25, 0x01	; 1
 f6e:	50 40       	sbci	r21, 0x00	; 0
 f70:	66 0f       	add	r22, r22
 f72:	77 1f       	adc	r23, r23
 f74:	88 1f       	adc	r24, r24
 f76:	d2 f7       	brpl	.-12     	; 0xf6c <__fp_norm2>
 f78:	08 95       	ret

00000f7a <__fp_powsodd>:
 f7a:	9f 93       	push	r25
 f7c:	8f 93       	push	r24
 f7e:	7f 93       	push	r23
 f80:	6f 93       	push	r22
 f82:	ff 93       	push	r31
 f84:	ef 93       	push	r30
 f86:	9b 01       	movw	r18, r22
 f88:	ac 01       	movw	r20, r24
 f8a:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 f8e:	ef 91       	pop	r30
 f90:	ff 91       	pop	r31
 f92:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_powser>
 f96:	2f 91       	pop	r18
 f98:	3f 91       	pop	r19
 f9a:	4f 91       	pop	r20
 f9c:	5f 91       	pop	r21
 f9e:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__mulsf3>

00000fa2 <__udivmodqi4>:
 fa2:	99 1b       	sub	r25, r25
 fa4:	79 e0       	ldi	r23, 0x09	; 9
 fa6:	04 c0       	rjmp	.+8      	; 0xfb0 <__udivmodqi4_ep>

00000fa8 <__udivmodqi4_loop>:
 fa8:	99 1f       	adc	r25, r25
 faa:	96 17       	cp	r25, r22
 fac:	08 f0       	brcs	.+2      	; 0xfb0 <__udivmodqi4_ep>
 fae:	96 1b       	sub	r25, r22

00000fb0 <__udivmodqi4_ep>:
 fb0:	88 1f       	adc	r24, r24
 fb2:	7a 95       	dec	r23
 fb4:	c9 f7       	brne	.-14     	; 0xfa8 <__udivmodqi4_loop>
 fb6:	80 95       	com	r24
 fb8:	08 95       	ret

00000fba <_exit>:
 fba:	f8 94       	cli

00000fbc <__stop_program>:
 fbc:	ff cf       	rjmp	.-2      	; 0xfbc <__stop_program>
